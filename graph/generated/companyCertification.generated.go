// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/Moral-Authority/backend/graph/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CompanyCertification_company(ctx context.Context, field graphql.CollectedField, obj *model.CompanyCertification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyCertification_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖgithubᚗcomᚋMoralᚑAuthorityᚋbackendᚋgraphᚋmodelᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyCertification_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyCertification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Company__id(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "url":
				return ec.fieldContext_Company_url(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "state":
				return ec.fieldContext_Company_state(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "user":
				return ec.fieldContext_Company_user(ctx, field)
			case "isVerified":
				return ec.fieldContext_Company_isVerified(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "companyCertifications":
				return ec.fieldContext_Company_companyCertifications(ctx, field)
			case "companyProducts":
				return ec.fieldContext_Company_companyProducts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyCertification_certification(ctx context.Context, field graphql.CollectedField, obj *model.CompanyCertification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyCertification_certification(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Certification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Certification)
	fc.Result = res
	return ec.marshalNCertification2ᚖgithubᚗcomᚋMoralᚑAuthorityᚋbackendᚋgraphᚋmodelᚐCertification(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyCertification_certification(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyCertification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Certification__id(ctx, field)
			case "Name":
				return ec.fieldContext_Certification_Name(ctx, field)
			case "Logo":
				return ec.fieldContext_Certification_Logo(ctx, field)
			case "Website":
				return ec.fieldContext_Certification_Website(ctx, field)
			case "Description":
				return ec.fieldContext_Certification_Description(ctx, field)
			case "CertifiesCompany":
				return ec.fieldContext_Certification_CertifiesCompany(ctx, field)
			case "CertifiesProduct":
				return ec.fieldContext_Certification_CertifiesProduct(ctx, field)
			case "CertifiesProcess":
				return ec.fieldContext_Certification_CertifiesProcess(ctx, field)
			case "CertifierContactID":
				return ec.fieldContext_Certification_CertifierContactID(ctx, field)
			case "Industry":
				return ec.fieldContext_Certification_Industry(ctx, field)
			case "Certifier":
				return ec.fieldContext_Certification_Certifier(ctx, field)
			case "Audited":
				return ec.fieldContext_Certification_Audited(ctx, field)
			case "Auditor":
				return ec.fieldContext_Certification_Auditor(ctx, field)
			case "Region":
				return ec.fieldContext_Certification_Region(ctx, field)
			case "Qualifiers":
				return ec.fieldContext_Certification_Qualifiers(ctx, field)
			case "Sources":
				return ec.fieldContext_Certification_Sources(ctx, field)
			case "CreatedAt":
				return ec.fieldContext_Certification_CreatedAt(ctx, field)
			case "UpdatedAt":
				return ec.fieldContext_Certification_UpdatedAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Certification", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyCertification_certifiedAt(ctx context.Context, field graphql.CollectedField, obj *model.CompanyCertification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyCertification_certifiedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertifiedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyCertification_certifiedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyCertification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyCertification_expirationDate(ctx context.Context, field graphql.CollectedField, obj *model.CompanyCertification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyCertification_expirationDate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpirationDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyCertification_expirationDate(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyCertification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyCertification_otherDetails(ctx context.Context, field graphql.CollectedField, obj *model.CompanyCertification) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyCertification_otherDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyCertification_otherDetails(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyCertification",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCompanyCertificationInput(ctx context.Context, obj interface{}) (model.CompanyCertificationInput, error) {
	var it model.CompanyCertificationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"certificationID", "certifiedAt", "expirationDate", "otherDetails"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "certificationID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certificationID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CertificationID = data
		case "certifiedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("certifiedAt"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.CertifiedAt = data
		case "expirationDate":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expirationDate"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpirationDate = data
		case "otherDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherDetails"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherDetails = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var companyCertificationImplementors = []string{"CompanyCertification"}

func (ec *executionContext) _CompanyCertification(ctx context.Context, sel ast.SelectionSet, obj *model.CompanyCertification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyCertificationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyCertification")
		case "company":
			out.Values[i] = ec._CompanyCertification_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "certification":
			out.Values[i] = ec._CompanyCertification_certification(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "certifiedAt":
			out.Values[i] = ec._CompanyCertification_certifiedAt(ctx, field, obj)
		case "expirationDate":
			out.Values[i] = ec._CompanyCertification_expirationDate(ctx, field, obj)
		case "otherDetails":
			out.Values[i] = ec._CompanyCertification_otherDetails(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNCompanyCertificationInput2ᚖgithubᚗcomᚋMoralᚑAuthorityᚋbackendᚋgraphᚋmodelᚐCompanyCertificationInput(ctx context.Context, v interface{}) (*model.CompanyCertificationInput, error) {
	res, err := ec.unmarshalInputCompanyCertificationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCompanyCertificationInput2ᚕᚖgithubᚗcomᚋMoralᚑAuthorityᚋbackendᚋgraphᚋmodelᚐCompanyCertificationInputᚄ(ctx context.Context, v interface{}) ([]*model.CompanyCertificationInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CompanyCertificationInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCompanyCertificationInput2ᚖgithubᚗcomᚋMoralᚑAuthorityᚋbackendᚋgraphᚋmodelᚐCompanyCertificationInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

// endregion ***************************** type.gotpl *****************************
