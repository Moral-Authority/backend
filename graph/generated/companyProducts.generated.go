// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/Moral-Authority/backend/graph/model"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CompanyProduct_company(ctx context.Context, field graphql.CollectedField, obj *model.CompanyProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyProduct_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Company)
	fc.Result = res
	return ec.marshalNCompany2ᚖgithubᚗcomᚋMoralᚑAuthorityᚋbackendᚋgraphᚋmodelᚐCompany(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyProduct_company(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Company__id(ctx, field)
			case "name":
				return ec.fieldContext_Company_name(ctx, field)
			case "url":
				return ec.fieldContext_Company_url(ctx, field)
			case "description":
				return ec.fieldContext_Company_description(ctx, field)
			case "city":
				return ec.fieldContext_Company_city(ctx, field)
			case "state":
				return ec.fieldContext_Company_state(ctx, field)
			case "country":
				return ec.fieldContext_Company_country(ctx, field)
			case "user":
				return ec.fieldContext_Company_user(ctx, field)
			case "isVerified":
				return ec.fieldContext_Company_isVerified(ctx, field)
			case "logo":
				return ec.fieldContext_Company_logo(ctx, field)
			case "companyCertifications":
				return ec.fieldContext_Company_companyCertifications(ctx, field)
			case "companyProducts":
				return ec.fieldContext_Company_companyProducts(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Company", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyProduct_product(ctx context.Context, field graphql.CollectedField, obj *model.CompanyProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyProduct_product(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Product, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Product)
	fc.Result = res
	return ec.marshalNProduct2ᚖgithubᚗcomᚋMoralᚑAuthorityᚋbackendᚋgraphᚋmodelᚐProduct(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyProduct_product(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "_id":
				return ec.fieldContext_Product__id(ctx, field)
			case "Title":
				return ec.fieldContext_Product_Title(ctx, field)
			case "Description":
				return ec.fieldContext_Product_Description(ctx, field)
			case "ImageLinks":
				return ec.fieldContext_Product_ImageLinks(ctx, field)
			case "Company":
				return ec.fieldContext_Product_Company(ctx, field)
			case "PurchaseInfo":
				return ec.fieldContext_Product_PurchaseInfo(ctx, field)
			case "ProductCertifications":
				return ec.fieldContext_Product_ProductCertifications(ctx, field)
			case "CompanyCertifications":
				return ec.fieldContext_Product_CompanyCertifications(ctx, field)
			case "Department":
				return ec.fieldContext_Product_Department(ctx, field)
			case "subDepartment":
				return ec.fieldContext_Product_subDepartment(ctx, field)
			case "MaterialsAndIngredients":
				return ec.fieldContext_Product_MaterialsAndIngredients(ctx, field)
			case "GiveBackPrograms":
				return ec.fieldContext_Product_GiveBackPrograms(ctx, field)
			case "OwnersAndFounders":
				return ec.fieldContext_Product_OwnersAndFounders(ctx, field)
			case "Section":
				return ec.fieldContext_Product_Section(ctx, field)
			case "Subsection":
				return ec.fieldContext_Product_Subsection(ctx, field)
			case "Category":
				return ec.fieldContext_Product_Category(ctx, field)
			case "SubCategory":
				return ec.fieldContext_Product_SubCategory(ctx, field)
			case "Type":
				return ec.fieldContext_Product_Type(ctx, field)
			case "Style":
				return ec.fieldContext_Product_Style(ctx, field)
			case "Verified":
				return ec.fieldContext_Product_Verified(ctx, field)
			case "VerifiedBy":
				return ec.fieldContext_Product_VerifiedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Product", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyProduct_launchedAt(ctx context.Context, field graphql.CollectedField, obj *model.CompanyProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyProduct_launchedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LaunchedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyProduct_launchedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyProduct_discontinuedAt(ctx context.Context, field graphql.CollectedField, obj *model.CompanyProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyProduct_discontinuedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiscontinuedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyProduct_discontinuedAt(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CompanyProduct_otherDetails(ctx context.Context, field graphql.CollectedField, obj *model.CompanyProduct) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CompanyProduct_otherDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OtherDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CompanyProduct_otherDetails(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CompanyProduct",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCompanyProductInput(ctx context.Context, obj interface{}) (model.CompanyProductInput, error) {
	var it model.CompanyProductInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"productID", "launchedAt", "discontinuedAt", "otherDetails"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "productID":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productID"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ProductID = data
		case "launchedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("launchedAt"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LaunchedAt = data
		case "discontinuedAt":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discontinuedAt"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DiscontinuedAt = data
		case "otherDetails":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otherDetails"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.OtherDetails = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var companyProductImplementors = []string{"CompanyProduct"}

func (ec *executionContext) _CompanyProduct(ctx context.Context, sel ast.SelectionSet, obj *model.CompanyProduct) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, companyProductImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CompanyProduct")
		case "company":
			out.Values[i] = ec._CompanyProduct_company(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "product":
			out.Values[i] = ec._CompanyProduct_product(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "launchedAt":
			out.Values[i] = ec._CompanyProduct_launchedAt(ctx, field, obj)
		case "discontinuedAt":
			out.Values[i] = ec._CompanyProduct_discontinuedAt(ctx, field, obj)
		case "otherDetails":
			out.Values[i] = ec._CompanyProduct_otherDetails(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNCompanyProductInput2ᚖgithubᚗcomᚋMoralᚑAuthorityᚋbackendᚋgraphᚋmodelᚐCompanyProductInput(ctx context.Context, v interface{}) (*model.CompanyProductInput, error) {
	res, err := ec.unmarshalInputCompanyProductInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCompanyProductInput2ᚕᚖgithubᚗcomᚋMoralᚑAuthorityᚋbackendᚋgraphᚋmodelᚐCompanyProductInputᚄ(ctx context.Context, v interface{}) ([]*model.CompanyProductInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CompanyProductInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNCompanyProductInput2ᚖgithubᚗcomᚋMoralᚑAuthorityᚋbackendᚋgraphᚋmodelᚐCompanyProductInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

// endregion ***************************** type.gotpl *****************************
