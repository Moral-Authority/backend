// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/howstrongiam/backend/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Category struct {
		ID    func(childComplexity int) int
		Title func(childComplexity int) int
	}

	Certification struct {
		Audited                 func(childComplexity int) int
		Auditor                 func(childComplexity int) int
		Certifies               func(childComplexity int) int
		FoundWhere              func(childComplexity int) int
		HowToGetIt              func(childComplexity int) int
		ID                      func(childComplexity int) int
		Industry                func(childComplexity int) int
		LogoLink                func(childComplexity int) int
		Name                    func(childComplexity int) int
		Notes                   func(childComplexity int) int
		ProvidingCompany        func(childComplexity int) int
		ProvidingCompanyWebsite func(childComplexity int) int
		Type                    func(childComplexity int) int
	}

	Company struct {
		Certification func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		Image         func(childComplexity int) int
		IsVerified    func(childComplexity int) int
		URL           func(childComplexity int) int
		User          func(childComplexity int) int
	}

	Department struct {
		Categories func(childComplexity int) int
		ID         func(childComplexity int) int
		Title      func(childComplexity int) int
	}

	Favourite struct {
		ID      func(childComplexity int) int
		Product func(childComplexity int) int
	}

	Image struct {
		ID       func(childComplexity int) int
		Location func(childComplexity int) int
	}

	Mutation struct {
		AddCategory      func(childComplexity int, input model.AddCategory) int
		AddCompany       func(childComplexity int, request model.AddCompany) int
		AddDepartment    func(childComplexity int, input model.AddDepartment) int
		AddFav           func(childComplexity int, request model.AddUserFav) int
		AddProduct       func(childComplexity int, request model.AddProductRequest) int
		AddProductFilter func(childComplexity int, input model.AddFilter) int
		AddSection       func(childComplexity int, input model.AddSection) int
		AddStyle         func(childComplexity int, input model.AddStyleRequest) int
		AddSubCategory   func(childComplexity int, input model.AddSubCategory) int
		AddSubSection    func(childComplexity int, input model.AddSubSection) int
		AddType          func(childComplexity int, input model.AddTypeRequest) int
		AddUser          func(childComplexity int, input model.NewUser) int
		BaseMutation     func(childComplexity int) int
		UpdateUser       func(childComplexity int, input model.UpdateUser) int
	}

	Product struct {
		Category                func(childComplexity int) int
		Certification           func(childComplexity int) int
		CompanyCertifications   func(childComplexity int) int
		Department              func(childComplexity int) int
		Description             func(childComplexity int) int
		Filters                 func(childComplexity int) int
		GiveBackPrograms        func(childComplexity int) int
		ID                      func(childComplexity int) int
		ImageLinks              func(childComplexity int) int
		MaterialsAndIngredients func(childComplexity int) int
		OwnersAndFounders       func(childComplexity int) int
		ProductCertifications   func(childComplexity int) int
		PurchaseInfo            func(childComplexity int) int
		Section                 func(childComplexity int) int
		Style                   func(childComplexity int) int
		SubCategory             func(childComplexity int) int
		Subsection              func(childComplexity int) int
		Title                   func(childComplexity int) int
		Type                    func(childComplexity int) int
		Verified                func(childComplexity int) int
		VerifiedBy              func(childComplexity int) int
	}

	PurchaseInfo struct {
		Company func(childComplexity int) int
		Link    func(childComplexity int) int
		Price   func(childComplexity int) int
		Rating  func(childComplexity int) int
	}

	Query struct {
		BaseQuery        func(childComplexity int) int
		GetCategories    func(childComplexity int, input *string) int
		GetCompany       func(childComplexity int, id string) int
		GetDepartments   func(childComplexity int, input *string) int
		GetFilters       func(childComplexity int, input *string) int
		GetSections      func(childComplexity int, input *string) int
		GetStyle         func(childComplexity int, input *string) int
		GetSubCategories func(childComplexity int, input *string) int
		GetSubSections   func(childComplexity int, input *string) int
		GetTypes         func(childComplexity int, input *string) int
		User             func(childComplexity int, id string) int
		Users            func(childComplexity int) int
	}

	Section struct {
		ID    func(childComplexity int) int
		Title func(childComplexity int) int
	}

	Style struct {
		ID       func(childComplexity int) int
		Products func(childComplexity int) int
		Title    func(childComplexity int) int
	}

	SubCategory struct {
		ID    func(childComplexity int) int
		Title func(childComplexity int) int
		Types func(childComplexity int) int
	}

	SubSection struct {
		ID    func(childComplexity int) int
		Title func(childComplexity int) int
	}

	Type struct {
		ID     func(childComplexity int) int
		Styles func(childComplexity int) int
		Title  func(childComplexity int) int
	}

	User struct {
		Email     func(childComplexity int) int
		FirstName func(childComplexity int) int
		ID        func(childComplexity int) int
		LastName  func(childComplexity int) int
	}
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Category._id":
		if e.complexity.Category.ID == nil {
			break
		}

		return e.complexity.Category.ID(childComplexity), true

	case "Category.Title":
		if e.complexity.Category.Title == nil {
			break
		}

		return e.complexity.Category.Title(childComplexity), true

	case "Certification.Audited":
		if e.complexity.Certification.Audited == nil {
			break
		}

		return e.complexity.Certification.Audited(childComplexity), true

	case "Certification.Auditor":
		if e.complexity.Certification.Auditor == nil {
			break
		}

		return e.complexity.Certification.Auditor(childComplexity), true

	case "Certification.Certifies":
		if e.complexity.Certification.Certifies == nil {
			break
		}

		return e.complexity.Certification.Certifies(childComplexity), true

	case "Certification.FoundWhere":
		if e.complexity.Certification.FoundWhere == nil {
			break
		}

		return e.complexity.Certification.FoundWhere(childComplexity), true

	case "Certification.HowToGetIt":
		if e.complexity.Certification.HowToGetIt == nil {
			break
		}

		return e.complexity.Certification.HowToGetIt(childComplexity), true

	case "Certification._id":
		if e.complexity.Certification.ID == nil {
			break
		}

		return e.complexity.Certification.ID(childComplexity), true

	case "Certification.Industry":
		if e.complexity.Certification.Industry == nil {
			break
		}

		return e.complexity.Certification.Industry(childComplexity), true

	case "Certification.LogoLink":
		if e.complexity.Certification.LogoLink == nil {
			break
		}

		return e.complexity.Certification.LogoLink(childComplexity), true

	case "Certification.Name":
		if e.complexity.Certification.Name == nil {
			break
		}

		return e.complexity.Certification.Name(childComplexity), true

	case "Certification.Notes":
		if e.complexity.Certification.Notes == nil {
			break
		}

		return e.complexity.Certification.Notes(childComplexity), true

	case "Certification.ProvidingCompany":
		if e.complexity.Certification.ProvidingCompany == nil {
			break
		}

		return e.complexity.Certification.ProvidingCompany(childComplexity), true

	case "Certification.ProvidingCompanyWebsite":
		if e.complexity.Certification.ProvidingCompanyWebsite == nil {
			break
		}

		return e.complexity.Certification.ProvidingCompanyWebsite(childComplexity), true

	case "Certification.Type":
		if e.complexity.Certification.Type == nil {
			break
		}

		return e.complexity.Certification.Type(childComplexity), true

	case "Company.certification":
		if e.complexity.Company.Certification == nil {
			break
		}

		return e.complexity.Company.Certification(childComplexity), true

	case "Company.description":
		if e.complexity.Company.Description == nil {
			break
		}

		return e.complexity.Company.Description(childComplexity), true

	case "Company._id":
		if e.complexity.Company.ID == nil {
			break
		}

		return e.complexity.Company.ID(childComplexity), true

	case "Company.image":
		if e.complexity.Company.Image == nil {
			break
		}

		return e.complexity.Company.Image(childComplexity), true

	case "Company.isVerified":
		if e.complexity.Company.IsVerified == nil {
			break
		}

		return e.complexity.Company.IsVerified(childComplexity), true

	case "Company.url":
		if e.complexity.Company.URL == nil {
			break
		}

		return e.complexity.Company.URL(childComplexity), true

	case "Company.user":
		if e.complexity.Company.User == nil {
			break
		}

		return e.complexity.Company.User(childComplexity), true

	case "Department.Categories":
		if e.complexity.Department.Categories == nil {
			break
		}

		return e.complexity.Department.Categories(childComplexity), true

	case "Department._id":
		if e.complexity.Department.ID == nil {
			break
		}

		return e.complexity.Department.ID(childComplexity), true

	case "Department.Title":
		if e.complexity.Department.Title == nil {
			break
		}

		return e.complexity.Department.Title(childComplexity), true

	case "Favourite._id":
		if e.complexity.Favourite.ID == nil {
			break
		}

		return e.complexity.Favourite.ID(childComplexity), true

	case "Favourite.product":
		if e.complexity.Favourite.Product == nil {
			break
		}

		return e.complexity.Favourite.Product(childComplexity), true

	case "Image._id":
		if e.complexity.Image.ID == nil {
			break
		}

		return e.complexity.Image.ID(childComplexity), true

	case "Image.Location":
		if e.complexity.Image.Location == nil {
			break
		}

		return e.complexity.Image.Location(childComplexity), true

	case "Mutation.addCategory":
		if e.complexity.Mutation.AddCategory == nil {
			break
		}

		args, err := ec.field_Mutation_addCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCategory(childComplexity, args["input"].(model.AddCategory)), true

	case "Mutation.addCompany":
		if e.complexity.Mutation.AddCompany == nil {
			break
		}

		args, err := ec.field_Mutation_addCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCompany(childComplexity, args["request"].(model.AddCompany)), true

	case "Mutation.addDepartment":
		if e.complexity.Mutation.AddDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_addDepartment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddDepartment(childComplexity, args["input"].(model.AddDepartment)), true

	case "Mutation.addFav":
		if e.complexity.Mutation.AddFav == nil {
			break
		}

		args, err := ec.field_Mutation_addFav_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddFav(childComplexity, args["request"].(model.AddUserFav)), true

	case "Mutation.addProduct":
		if e.complexity.Mutation.AddProduct == nil {
			break
		}

		args, err := ec.field_Mutation_addProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddProduct(childComplexity, args["request"].(model.AddProductRequest)), true

	case "Mutation.addProductFilter":
		if e.complexity.Mutation.AddProductFilter == nil {
			break
		}

		args, err := ec.field_Mutation_addProductFilter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddProductFilter(childComplexity, args["input"].(model.AddFilter)), true

	case "Mutation.addSection":
		if e.complexity.Mutation.AddSection == nil {
			break
		}

		args, err := ec.field_Mutation_addSection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddSection(childComplexity, args["input"].(model.AddSection)), true

	case "Mutation.addStyle":
		if e.complexity.Mutation.AddStyle == nil {
			break
		}

		args, err := ec.field_Mutation_addStyle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddStyle(childComplexity, args["input"].(model.AddStyleRequest)), true

	case "Mutation.addSubCategory":
		if e.complexity.Mutation.AddSubCategory == nil {
			break
		}

		args, err := ec.field_Mutation_addSubCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddSubCategory(childComplexity, args["input"].(model.AddSubCategory)), true

	case "Mutation.addSubSection":
		if e.complexity.Mutation.AddSubSection == nil {
			break
		}

		args, err := ec.field_Mutation_addSubSection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddSubSection(childComplexity, args["input"].(model.AddSubSection)), true

	case "Mutation.addType":
		if e.complexity.Mutation.AddType == nil {
			break
		}

		args, err := ec.field_Mutation_addType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddType(childComplexity, args["input"].(model.AddTypeRequest)), true

	case "Mutation.addUser":
		if e.complexity.Mutation.AddUser == nil {
			break
		}

		args, err := ec.field_Mutation_addUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUser(childComplexity, args["input"].(model.NewUser)), true

	case "Mutation.BaseMutation":
		if e.complexity.Mutation.BaseMutation == nil {
			break
		}

		return e.complexity.Mutation.BaseMutation(childComplexity), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(model.UpdateUser)), true

	case "Product.Category":
		if e.complexity.Product.Category == nil {
			break
		}

		return e.complexity.Product.Category(childComplexity), true

	case "Product.Certification":
		if e.complexity.Product.Certification == nil {
			break
		}

		return e.complexity.Product.Certification(childComplexity), true

	case "Product.CompanyCertifications":
		if e.complexity.Product.CompanyCertifications == nil {
			break
		}

		return e.complexity.Product.CompanyCertifications(childComplexity), true

	case "Product.Department":
		if e.complexity.Product.Department == nil {
			break
		}

		return e.complexity.Product.Department(childComplexity), true

	case "Product.Description":
		if e.complexity.Product.Description == nil {
			break
		}

		return e.complexity.Product.Description(childComplexity), true

	case "Product.Filters":
		if e.complexity.Product.Filters == nil {
			break
		}

		return e.complexity.Product.Filters(childComplexity), true

	case "Product.GiveBackPrograms":
		if e.complexity.Product.GiveBackPrograms == nil {
			break
		}

		return e.complexity.Product.GiveBackPrograms(childComplexity), true

	case "Product._id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.ImageLinks":
		if e.complexity.Product.ImageLinks == nil {
			break
		}

		return e.complexity.Product.ImageLinks(childComplexity), true

	case "Product.MaterialsAndIngredients":
		if e.complexity.Product.MaterialsAndIngredients == nil {
			break
		}

		return e.complexity.Product.MaterialsAndIngredients(childComplexity), true

	case "Product.OwnersAndFounders":
		if e.complexity.Product.OwnersAndFounders == nil {
			break
		}

		return e.complexity.Product.OwnersAndFounders(childComplexity), true

	case "Product.ProductCertifications":
		if e.complexity.Product.ProductCertifications == nil {
			break
		}

		return e.complexity.Product.ProductCertifications(childComplexity), true

	case "Product.PurchaseInfo":
		if e.complexity.Product.PurchaseInfo == nil {
			break
		}

		return e.complexity.Product.PurchaseInfo(childComplexity), true

	case "Product.Section":
		if e.complexity.Product.Section == nil {
			break
		}

		return e.complexity.Product.Section(childComplexity), true

	case "Product.Style":
		if e.complexity.Product.Style == nil {
			break
		}

		return e.complexity.Product.Style(childComplexity), true

	case "Product.SubCategory":
		if e.complexity.Product.SubCategory == nil {
			break
		}

		return e.complexity.Product.SubCategory(childComplexity), true

	case "Product.Subsection":
		if e.complexity.Product.Subsection == nil {
			break
		}

		return e.complexity.Product.Subsection(childComplexity), true

	case "Product.Title":
		if e.complexity.Product.Title == nil {
			break
		}

		return e.complexity.Product.Title(childComplexity), true

	case "Product.Type":
		if e.complexity.Product.Type == nil {
			break
		}

		return e.complexity.Product.Type(childComplexity), true

	case "Product.Verified":
		if e.complexity.Product.Verified == nil {
			break
		}

		return e.complexity.Product.Verified(childComplexity), true

	case "Product.VerifiedBy":
		if e.complexity.Product.VerifiedBy == nil {
			break
		}

		return e.complexity.Product.VerifiedBy(childComplexity), true

	case "PurchaseInfo.Company":
		if e.complexity.PurchaseInfo.Company == nil {
			break
		}

		return e.complexity.PurchaseInfo.Company(childComplexity), true

	case "PurchaseInfo.Link":
		if e.complexity.PurchaseInfo.Link == nil {
			break
		}

		return e.complexity.PurchaseInfo.Link(childComplexity), true

	case "PurchaseInfo.Price":
		if e.complexity.PurchaseInfo.Price == nil {
			break
		}

		return e.complexity.PurchaseInfo.Price(childComplexity), true

	case "PurchaseInfo.Rating":
		if e.complexity.PurchaseInfo.Rating == nil {
			break
		}

		return e.complexity.PurchaseInfo.Rating(childComplexity), true

	case "Query.BaseQuery":
		if e.complexity.Query.BaseQuery == nil {
			break
		}

		return e.complexity.Query.BaseQuery(childComplexity), true

	case "Query.getCategories":
		if e.complexity.Query.GetCategories == nil {
			break
		}

		args, err := ec.field_Query_getCategories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCategories(childComplexity, args["input"].(*string)), true

	case "Query.getCompany":
		if e.complexity.Query.GetCompany == nil {
			break
		}

		args, err := ec.field_Query_getCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompany(childComplexity, args["id"].(string)), true

	case "Query.getDepartments":
		if e.complexity.Query.GetDepartments == nil {
			break
		}

		args, err := ec.field_Query_getDepartments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDepartments(childComplexity, args["input"].(*string)), true

	case "Query.getFilters":
		if e.complexity.Query.GetFilters == nil {
			break
		}

		args, err := ec.field_Query_getFilters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetFilters(childComplexity, args["input"].(*string)), true

	case "Query.getSections":
		if e.complexity.Query.GetSections == nil {
			break
		}

		args, err := ec.field_Query_getSections_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSections(childComplexity, args["input"].(*string)), true

	case "Query.getStyle":
		if e.complexity.Query.GetStyle == nil {
			break
		}

		args, err := ec.field_Query_getStyle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetStyle(childComplexity, args["input"].(*string)), true

	case "Query.getSubCategories":
		if e.complexity.Query.GetSubCategories == nil {
			break
		}

		args, err := ec.field_Query_getSubCategories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSubCategories(childComplexity, args["input"].(*string)), true

	case "Query.getSubSections":
		if e.complexity.Query.GetSubSections == nil {
			break
		}

		args, err := ec.field_Query_getSubSections_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSubSections(childComplexity, args["input"].(*string)), true

	case "Query.getTypes":
		if e.complexity.Query.GetTypes == nil {
			break
		}

		args, err := ec.field_Query_getTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetTypes(childComplexity, args["input"].(*string)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["_id"].(string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		return e.complexity.Query.Users(childComplexity), true

	case "Section._id":
		if e.complexity.Section.ID == nil {
			break
		}

		return e.complexity.Section.ID(childComplexity), true

	case "Section.Title":
		if e.complexity.Section.Title == nil {
			break
		}

		return e.complexity.Section.Title(childComplexity), true

	case "Style._id":
		if e.complexity.Style.ID == nil {
			break
		}

		return e.complexity.Style.ID(childComplexity), true

	case "Style.Products":
		if e.complexity.Style.Products == nil {
			break
		}

		return e.complexity.Style.Products(childComplexity), true

	case "Style.Title":
		if e.complexity.Style.Title == nil {
			break
		}

		return e.complexity.Style.Title(childComplexity), true

	case "SubCategory._id":
		if e.complexity.SubCategory.ID == nil {
			break
		}

		return e.complexity.SubCategory.ID(childComplexity), true

	case "SubCategory.Title":
		if e.complexity.SubCategory.Title == nil {
			break
		}

		return e.complexity.SubCategory.Title(childComplexity), true

	case "SubCategory.Types":
		if e.complexity.SubCategory.Types == nil {
			break
		}

		return e.complexity.SubCategory.Types(childComplexity), true

	case "SubSection._id":
		if e.complexity.SubSection.ID == nil {
			break
		}

		return e.complexity.SubSection.ID(childComplexity), true

	case "SubSection.Title":
		if e.complexity.SubSection.Title == nil {
			break
		}

		return e.complexity.SubSection.Title(childComplexity), true

	case "Type._id":
		if e.complexity.Type.ID == nil {
			break
		}

		return e.complexity.Type.ID(childComplexity), true

	case "Type.Styles":
		if e.complexity.Type.Styles == nil {
			break
		}

		return e.complexity.Type.Styles(childComplexity), true

	case "Type.Title":
		if e.complexity.Type.Title == nil {
			break
		}

		return e.complexity.Type.Title(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User._id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAddCategory,
		ec.unmarshalInputAddCertification,
		ec.unmarshalInputAddCompany,
		ec.unmarshalInputAddDepartment,
		ec.unmarshalInputAddFilter,
		ec.unmarshalInputAddProductRequest,
		ec.unmarshalInputAddSection,
		ec.unmarshalInputAddStyleRequest,
		ec.unmarshalInputAddSubCategory,
		ec.unmarshalInputAddSubSection,
		ec.unmarshalInputAddTypeRequest,
		ec.unmarshalInputAddUserFav,
		ec.unmarshalInputAllCertificationsInput,
		ec.unmarshalInputCategorizationInput,
		ec.unmarshalInputNewUser,
		ec.unmarshalInputPurchaseInfoInput,
		ec.unmarshalInputUpdateUser,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../certification.graphqls", Input: `#    Name: String!
#    LogoLink: String
#	 ProvidingCompany: String!
#    Certifies: PRODUCT, COMPANY, OTHER?
#    Type: Certification, Network, Other
#    Audited: Boolean
#    Auditor: Who audits if this is audited
#    Industry: Fashion, Beauty, etc
#    CertifyingCompanyWebsite: String!
#    FoundWhere: International, US, Australia etc
#    HowToGetIt: paying a fee, applying, etc

input AddCertification {
    Name: String!
    LogoLink: String
    Industry: String!
    ProvidingCompany: String!
    Certifies: certifies!
    Type: String
    Audited: Boolean
    Auditor: String
    ProvidingCompanyWebsite: String!
    FoundWhere: String
    HowToGetIt: String
    Notes: String
}

type Certification {
    _id: String!
    Name: String!
    LogoLink: String
    Industry: String!
    ProvidingCompany: String!
    Certifies: certifies!
    Type: String
    Audited: Boolean
    Auditor: String
    ProvidingCompanyWebsite: String!
    FoundWhere: String
    HowToGetIt: String
    Notes: String
}

enum certifies {
    Product, Company, MaterialsAndIngredients, GiveBackProgram, OwnersAndFounders, Other
}`, BuiltIn: false},
	{Name: "../company.graphqls", Input: `
extend type Mutation {
    addCompany(request: AddCompany!): Company!
}

extend type Query {
    getCompany(id: String!): Company!
}

type Company {
    _id: String!
    url: String!
    description: String!
    user: User!
    isVerified: Boolean!
    image: Image!
    certification: Certification!
}

input AddCompany {
    url: String!
    description: String!
    userId: String!
    isVerified: Boolean!
    imageLocation: String!
    certification: AddCertification!
}
`, BuiltIn: false},
	{Name: "../favorite.graphqls", Input: `extend type Mutation {
    addFav(request: AddUserFav!): [Favourite]
}

type Favourite {
_id: String!
product: Product!
}

input AddUserFav {
userId: String!
productId: String!
}
`, BuiltIn: false},
	{Name: "../prodCategorization.graphqls", Input: `extend type Mutation {

    #   ========== SECTION ==========
    addSection(input: AddSection!): Section!
    addSubSection(input: AddSubSection!): SubSection!

    #   ========== DEPARTMENT ==========
    addDepartment(input: AddDepartment!): Department!

    #   ========== CATEGORY ==========
    addCategory(input: AddCategory!): Category!
    addSubCategory(input: AddSubCategory!): SubCategory!

    #   ========== TYPE ==========
    addType(input: AddTypeRequest!): Type!

    #   ========== STYLE ==========
    addStyle(input: AddStyleRequest!): Style!

    addProductFilter(input: AddFilter!): String!

}

extend type Query {
    getSections(input: ID): [Section]!
    getSubSections(input: ID): [SubSection]!
    getDepartments(input: ID): [Department]!
    getCategories(input: ID): [Category]!
    getSubCategories(input: ID): [SubCategory]!
    getTypes(input: ID): [Type]!
    getStyle(input: ID): [Style]!
    getFilters(input: ID): [String]!
}

# ======= INPUTS ======

input AddSection {
    Title: String!
}

input AddSubSection {
    Title: String!
    SectionId: String!
}

input AddDepartment {
    Title: String!
    SubSectionId: String!
}

input AddCategory {
    Title: String!
    DepartmentId: String!
}

input AddSubCategory {
    Title: String!
    CategoryId: String!
}

input AddTypeRequest {
    Title: String!
    SubCategoryId: String!
}

input AddStyleRequest {
    Title: String!
    TypeId: String!
}

input AddFilter {
    FilterCategory: FilterCategory!
    FilterType: FilterType!

}

enum FilterCategory {
    Section, Subsection, Department, Category, SubCategory, Type, Style
}

enum FilterType {
    color, style, shape, material, setting, scent, pattern, chainType, closureType, cutType, gemstone, location,
    holiday, occasion, size, mount, fillMaterial, height, length
}


# ======= INPUTS END ======

type Section {
    _id: String!
    Title: String!
}

type SubSection {
    _id: String!
    Title: String!
}

type Category {
    _id: String!
    Title: String!
}

type SubCategory {
    _id: String!
    Title: String!
    Types: [Type]
}

type Department {
    _id: String!
    Title: String!
    Categories: [Category]
}

type Style {
    _id: String!
    Title: String!
    Products: [Product]
}

type Type {
    _id: String!
    Title: String!
    Styles: [Style]
}`, BuiltIn: false},
	{Name: "../product.graphqls", Input: `extend type Mutation {
    addProduct(request: AddProductRequest!): Product!
}

input AddProductRequest {
    Title: String!
    Description: String!
    Categorization: CategorizationInput!
    Certifications: AllCertificationsInput!
    PurchaseInfo: PurchaseInfoInput!
    ImageLinks: [String]
}

input PurchaseInfoInput {
    Price: String!
    Link: String!
    Rating: String
    Company: CompanyEnum
    IfOtherCompany: String
}

input AllCertificationsInput {
    ProductCertifications: [String]
    CompanyCertifications: CompanyCertifications
    IfCompanyIsOther: String
    MaterialsAndIngredients: MaterialsAndIngredients
    IfMaterialsAndIngredientsIsOther: String
    GiveBackPrograms: GiveBackPrograms
    IfGiveBackProgramsIsOther: String
    OwnersAndFounders: OwnersAndFounders
    IfOwnersAndFoundersIsOther: String
}

input CategorizationInput {
    Section: String
    SubSection: String
    Department: String
    Category: String
    SubCategory:String
    Type: String
    Style: String
}

enum CompanyEnum {
    Amazon, Etsy, Woocommerce, Ebay, Shopify, Other
}
#
#enum SectionEnum {
#    ShopsRestaurantsAndServices, HomeAndGarden, GroceryAndHouseholdItems, ApparelAndBeauty, KidsPetsAndBaby, BooksGamesAndEntertainment,ElectronicsAndAccessories,ArtAndHobby
#}


enum CompanyCertifications {
    Bcorp, PlasticBankPartner, rePurposeGlobalPartner, ClimateNeutral
    CrueltyFree, LeapingBunny, FairTradeCertified, SafeAndFairLabor, Other
}

enum MaterialsAndIngredients {
    LowImpactDyesOrInks, OEKOTEX, ParabenFree, PhthalateFree, SulfateFree
    OrganicContent, USDACertifiedOrganic, GOTSCertified, RecycledPETFabric
    RecycledPlastic, RecycledContent, SustainablyHarvestedRubber,
    SustainablyHarvestedWood, PlasticFree, Vegan, Organic, MadeInAmerica, Handmade, OTHER
}

enum GiveBackPrograms {
    GetOneGiveOne, PlantsATree, Charitable, OnePercentForThePlanet, OTHER
}

enum OwnersAndFounders {
    WomanOwned, MomOwned, BlackOwned, IndigenousOwned, AsianPacificIslanderOwned, LGBTQPlusOwned, OTHER
}

type Product {
    _id: String!
    Title: String!
    Description: String!
    Certification: Certification!
    ProductCertifications: [String]
    CompanyCertifications:[String]
    MaterialsAndIngredients: [String]
    GiveBackPrograms: [String]
    OwnersAndFounders: [String]
    Section: String
    Subsection: String
    Department: [String]
    Category: String
    SubCategory: String
    Type: String
    Style: String
    Filters: [String]
    ImageLinks: [String]
    PurchaseInfo: [PurchaseInfo]
    Verified: Boolean
    VerifiedBy: [String]
}

type PurchaseInfo {
    Price: String
    Link: String
    Company: String
    Rating: String
}`, BuiltIn: false},
	{Name: "../schema.graphqls", Input: `
schema {
  query: Query
  mutation: Mutation
}
type Query {
  BaseQuery: Any
}

type Mutation {
  BaseMutation: Any
}


scalar Any`, BuiltIn: false},
	{Name: "../user.graphqls", Input: `extend type Query {
    user(_id: String!): User!
    users: [User]!
}

extend type Mutation {
    addUser(input: NewUser!): User!
    updateUser(input: UpdateUser!): User!
}

type Image {
    _id: String!
    Location: String!
}

type User {
    _id: String!
    firstName: String!
    lastName: String!
    email: String!
}

input NewUser {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
}

input UpdateUser {
    userId: String!
    firstName: String
    lastName: String
    email: String
    password: String
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
