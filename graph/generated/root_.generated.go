// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/howstrongiam/backend/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Category struct {
		ID    func(childComplexity int) int
		Title func(childComplexity int) int
		Types func(childComplexity int) int
	}

	Certification struct {
		CertName          func(childComplexity int) int
		CertifyingCompany func(childComplexity int) int
		ID                func(childComplexity int) int
	}

	Company struct {
		Certification func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		Image         func(childComplexity int) int
		IsVerified    func(childComplexity int) int
		URL           func(childComplexity int) int
		User          func(childComplexity int) int
	}

	Department struct {
		Categories func(childComplexity int) int
		ID         func(childComplexity int) int
		Title      func(childComplexity int) int
	}

	Favourite struct {
		ID      func(childComplexity int) int
		Product func(childComplexity int) int
	}

	Image struct {
		ID       func(childComplexity int) int
		Location func(childComplexity int) int
	}

	Mutation struct {
		AddCategory   func(childComplexity int, request model.AddCategoryRequest) int
		AddCompany    func(childComplexity int, request model.AddCompanyRequest) int
		AddDepartment func(childComplexity int, request model.AddDepartmentRequest) int
		AddFav        func(childComplexity int, request model.AddUserFav) int
		AddProduct    func(childComplexity int, request model.AddProductRequest) int
		AddStyle      func(childComplexity int, request model.AddStyleRequest) int
		AddType       func(childComplexity int, request model.AddTypeRequest) int
		AddUser       func(childComplexity int, input model.NewUser) int
		UpdateUser    func(childComplexity int, input model.UpdateUser) int
	}

	Product struct {
		Certification func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		Image         func(childComplexity int) int
		Title         func(childComplexity int) int
		URL           func(childComplexity int) int
		UserID        func(childComplexity int) int
	}

	Query struct {
		GetCompany     func(childComplexity int, id string) int
		GetDepartments func(childComplexity int) int
		User           func(childComplexity int, id string) int
		Users          func(childComplexity int) int
	}

	Style struct {
		ID       func(childComplexity int) int
		Products func(childComplexity int) int
		Title    func(childComplexity int) int
	}

	Type struct {
		ID     func(childComplexity int) int
		Styles func(childComplexity int) int
		Title  func(childComplexity int) int
	}

	User struct {
		Favourites func(childComplexity int) int
		FirstName  func(childComplexity int) int
		ID         func(childComplexity int) int
		LastName   func(childComplexity int) int
	}
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Category._id":
		if e.complexity.Category.ID == nil {
			break
		}

		return e.complexity.Category.ID(childComplexity), true

	case "Category.Title":
		if e.complexity.Category.Title == nil {
			break
		}

		return e.complexity.Category.Title(childComplexity), true

	case "Category.Types":
		if e.complexity.Category.Types == nil {
			break
		}

		return e.complexity.Category.Types(childComplexity), true

	case "Certification.CertName":
		if e.complexity.Certification.CertName == nil {
			break
		}

		return e.complexity.Certification.CertName(childComplexity), true

	case "Certification.CertifyingCompany":
		if e.complexity.Certification.CertifyingCompany == nil {
			break
		}

		return e.complexity.Certification.CertifyingCompany(childComplexity), true

	case "Certification._id":
		if e.complexity.Certification.ID == nil {
			break
		}

		return e.complexity.Certification.ID(childComplexity), true

	case "Company.certification":
		if e.complexity.Company.Certification == nil {
			break
		}

		return e.complexity.Company.Certification(childComplexity), true

	case "Company.description":
		if e.complexity.Company.Description == nil {
			break
		}

		return e.complexity.Company.Description(childComplexity), true

	case "Company._id":
		if e.complexity.Company.ID == nil {
			break
		}

		return e.complexity.Company.ID(childComplexity), true

	case "Company.image":
		if e.complexity.Company.Image == nil {
			break
		}

		return e.complexity.Company.Image(childComplexity), true

	case "Company.isVerified":
		if e.complexity.Company.IsVerified == nil {
			break
		}

		return e.complexity.Company.IsVerified(childComplexity), true

	case "Company.url":
		if e.complexity.Company.URL == nil {
			break
		}

		return e.complexity.Company.URL(childComplexity), true

	case "Company.user":
		if e.complexity.Company.User == nil {
			break
		}

		return e.complexity.Company.User(childComplexity), true

	case "Department.Categories":
		if e.complexity.Department.Categories == nil {
			break
		}

		return e.complexity.Department.Categories(childComplexity), true

	case "Department._id":
		if e.complexity.Department.ID == nil {
			break
		}

		return e.complexity.Department.ID(childComplexity), true

	case "Department.Title":
		if e.complexity.Department.Title == nil {
			break
		}

		return e.complexity.Department.Title(childComplexity), true

	case "Favourite._id":
		if e.complexity.Favourite.ID == nil {
			break
		}

		return e.complexity.Favourite.ID(childComplexity), true

	case "Favourite.product":
		if e.complexity.Favourite.Product == nil {
			break
		}

		return e.complexity.Favourite.Product(childComplexity), true

	case "Image._id":
		if e.complexity.Image.ID == nil {
			break
		}

		return e.complexity.Image.ID(childComplexity), true

	case "Image.Location":
		if e.complexity.Image.Location == nil {
			break
		}

		return e.complexity.Image.Location(childComplexity), true

	case "Mutation.addCategory":
		if e.complexity.Mutation.AddCategory == nil {
			break
		}

		args, err := ec.field_Mutation_addCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCategory(childComplexity, args["request"].(model.AddCategoryRequest)), true

	case "Mutation.addCompany":
		if e.complexity.Mutation.AddCompany == nil {
			break
		}

		args, err := ec.field_Mutation_addCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCompany(childComplexity, args["request"].(model.AddCompanyRequest)), true

	case "Mutation.addDepartment":
		if e.complexity.Mutation.AddDepartment == nil {
			break
		}

		args, err := ec.field_Mutation_addDepartment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddDepartment(childComplexity, args["request"].(model.AddDepartmentRequest)), true

	case "Mutation.addFav":
		if e.complexity.Mutation.AddFav == nil {
			break
		}

		args, err := ec.field_Mutation_addFav_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddFav(childComplexity, args["request"].(model.AddUserFav)), true

	case "Mutation.addProduct":
		if e.complexity.Mutation.AddProduct == nil {
			break
		}

		args, err := ec.field_Mutation_addProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddProduct(childComplexity, args["request"].(model.AddProductRequest)), true

	case "Mutation.addStyle":
		if e.complexity.Mutation.AddStyle == nil {
			break
		}

		args, err := ec.field_Mutation_addStyle_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddStyle(childComplexity, args["request"].(model.AddStyleRequest)), true

	case "Mutation.addType":
		if e.complexity.Mutation.AddType == nil {
			break
		}

		args, err := ec.field_Mutation_addType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddType(childComplexity, args["request"].(model.AddTypeRequest)), true

	case "Mutation.addUser":
		if e.complexity.Mutation.AddUser == nil {
			break
		}

		args, err := ec.field_Mutation_addUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUser(childComplexity, args["input"].(model.NewUser)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(model.UpdateUser)), true

	case "Product.Certification":
		if e.complexity.Product.Certification == nil {
			break
		}

		return e.complexity.Product.Certification(childComplexity), true

	case "Product.Description":
		if e.complexity.Product.Description == nil {
			break
		}

		return e.complexity.Product.Description(childComplexity), true

	case "Product._id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.Image":
		if e.complexity.Product.Image == nil {
			break
		}

		return e.complexity.Product.Image(childComplexity), true

	case "Product.Title":
		if e.complexity.Product.Title == nil {
			break
		}

		return e.complexity.Product.Title(childComplexity), true

	case "Product.Url":
		if e.complexity.Product.URL == nil {
			break
		}

		return e.complexity.Product.URL(childComplexity), true

	case "Product.UserId":
		if e.complexity.Product.UserID == nil {
			break
		}

		return e.complexity.Product.UserID(childComplexity), true

	case "Query.getCompany":
		if e.complexity.Query.GetCompany == nil {
			break
		}

		args, err := ec.field_Query_getCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompany(childComplexity, args["id"].(string)), true

	case "Query.getDepartments":
		if e.complexity.Query.GetDepartments == nil {
			break
		}

		return e.complexity.Query.GetDepartments(childComplexity), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["_id"].(string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		return e.complexity.Query.Users(childComplexity), true

	case "Style._id":
		if e.complexity.Style.ID == nil {
			break
		}

		return e.complexity.Style.ID(childComplexity), true

	case "Style.Products":
		if e.complexity.Style.Products == nil {
			break
		}

		return e.complexity.Style.Products(childComplexity), true

	case "Style.Title":
		if e.complexity.Style.Title == nil {
			break
		}

		return e.complexity.Style.Title(childComplexity), true

	case "Type._id":
		if e.complexity.Type.ID == nil {
			break
		}

		return e.complexity.Type.ID(childComplexity), true

	case "Type.Styles":
		if e.complexity.Type.Styles == nil {
			break
		}

		return e.complexity.Type.Styles(childComplexity), true

	case "Type.Title":
		if e.complexity.Type.Title == nil {
			break
		}

		return e.complexity.Type.Title(childComplexity), true

	case "User.favourites":
		if e.complexity.User.Favourites == nil {
			break
		}

		return e.complexity.User.Favourites(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User._id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAddCategoryRequest,
		ec.unmarshalInputAddCertificationRequest,
		ec.unmarshalInputAddCompanyRequest,
		ec.unmarshalInputAddDepartmentRequest,
		ec.unmarshalInputAddProductRequest,
		ec.unmarshalInputAddStyleRequest,
		ec.unmarshalInputAddTypeRequest,
		ec.unmarshalInputAddUserFav,
		ec.unmarshalInputNewUser,
		ec.unmarshalInputUpdateUser,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../category.graphqls", Input: `extend type Mutation {
    addCategory(request: AddCategoryRequest!): Category!
}

type Category {
    _id: String!
    Title: String!
    Types: [Type]
}

input AddCategoryRequest {
    Title: String!
    DepartmentId: String!
}`, BuiltIn: false},
	{Name: "../certification.graphqls", Input: `input AddCertificationRequest {
    CertifyingCompany: String!
    CertName: String!
}

type Certification {
    _id: String!
    CertifyingCompany: String!
    CertName: String!
}`, BuiltIn: false},
	{Name: "../company.graphqls", Input: `
extend type Mutation {
    addCompany(request: AddCompanyRequest!): Company!
}

extend type Query {
    getCompany(id: String!): Company!
}

type Company {
    _id: String!
    url: String!
    description: String!
    user: User!
    isVerified: Boolean!
    image: Image!
    certification: Certification!
}

input AddCompanyRequest {
    url: String!
    description: String!
    userId: String!
    isVerified: Boolean!
    imageLocation: String!
    certification: AddCertificationRequest!
}
`, BuiltIn: false},
	{Name: "../department.graphqls", Input: `extend type Mutation {
    addDepartment(request: AddDepartmentRequest!): Department!
}

extend type Query {
    getDepartments: [Department]!
}

type Department {
    _id: String!
    Title: String!
    Categories: [Category]
}

input AddDepartmentRequest {
    Title: String!
}`, BuiltIn: false},
	{Name: "../favorite.graphqls", Input: `extend type Mutation {
    addFav(request: AddUserFav!): [Favourite]
}

type Favourite {
_id: String!
product: Product!
}

input AddUserFav {
userId: String!
productId: String!
}
`, BuiltIn: false},
	{Name: "../product.graphqls", Input: `extend type Mutation {
    addProduct(request: AddProductRequest!): Product!
}

input AddProductRequest {
    Title: String!
    Url: String!
    Description: String!
    UserId: String!
    ImageLocation: String!
    Certification: AddCertificationRequest!
    StyleId: String!
}

type Product {
    _id: String!
    Title: String!
    Url: String!
    Description: String!
    UserId: String!
    Image: Image!
    Certification: Certification!
}`, BuiltIn: false},
	{Name: "../schema.graphqls", Input: `
type Query {
  user(_id: String!): User!
  users: [User]!
}

type Mutation {
  addUser(input: NewUser!): User!
  updateUser(input: UpdateUser!): User!
}

type Image {
  _id: String!
  Location: String!
}

`, BuiltIn: false},
	{Name: "../style.graphqls", Input: `extend type Mutation {
    addStyle(request: AddStyleRequest!): Style!
}

extend type Mutation {
    addType(request: AddTypeRequest!): Type!
}

type Style {
    _id: String!
    Title: String!
    Products: [Product]
}

input AddStyleRequest {
    Title: String!
    TypeId: String!
}`, BuiltIn: false},
	{Name: "../type.graphqls", Input: `type Type {
    _id: String!
    Title: String!
    Styles: [Style]
}

input AddTypeRequest {
    Title: String!
    CategoryId: String!
}`, BuiltIn: false},
	{Name: "../user.graphqls", Input: `type User {
    _id: String!
    firstName: String!
    lastName: String!
    favourites: [Favourite]
}

input NewUser {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
}

input UpdateUser {
    userId: String!
    firstName: String
    lastName: String
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
