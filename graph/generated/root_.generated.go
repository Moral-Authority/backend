// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/Moral-Authority/backend/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Category struct {
		Children func(childComplexity int) int
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
		ParentID func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	Certification struct {
		Audited            func(childComplexity int) int
		Auditor            func(childComplexity int) int
		Certifier          func(childComplexity int) int
		CertifierContactID func(childComplexity int) int
		CertifiesCompany   func(childComplexity int) int
		CertifiesProcess   func(childComplexity int) int
		CertifiesProduct   func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Description        func(childComplexity int) int
		ID                 func(childComplexity int) int
		Industry           func(childComplexity int) int
		Logo               func(childComplexity int) int
		Name               func(childComplexity int) int
		Qualifiers         func(childComplexity int) int
		Region             func(childComplexity int) int
		Sources            func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		Website            func(childComplexity int) int
	}

	Company struct {
		City        func(childComplexity int) int
		Country     func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		IsVerified  func(childComplexity int) int
		Logo        func(childComplexity int) int
		Name        func(childComplexity int) int
		State       func(childComplexity int) int
		URL         func(childComplexity int) int
		User        func(childComplexity int) int
	}

	Favourite struct {
		ID      func(childComplexity int) int
		Product func(childComplexity int) int
		User    func(childComplexity int) int
	}

	Image struct {
		ID       func(childComplexity int) int
		Location func(childComplexity int) int
	}

	Mutation struct {
		AddCategory         func(childComplexity int, input model.AddCategory) int
		AddCertification    func(childComplexity int, input model.AddCertification) int
		AddCompany          func(childComplexity int, request model.AddCompany) int
		AddFav              func(childComplexity int, request model.AddUserFav) int
		AddProduct          func(childComplexity int, request model.AddProductRequest) int
		AddUser             func(childComplexity int, input model.NewUser) int
		BaseMutation        func(childComplexity int) int
		UpdateCertification func(childComplexity int, input model.UpdateCertification) int
		UpdateUser          func(childComplexity int, input model.UpdateUser) int
	}

	Product struct {
		Category                func(childComplexity int) int
		Certification           func(childComplexity int) int
		CompanyCertifications   func(childComplexity int) int
		Department              func(childComplexity int) int
		Description             func(childComplexity int) int
		GiveBackPrograms        func(childComplexity int) int
		ID                      func(childComplexity int) int
		ImageLinks              func(childComplexity int) int
		MaterialsAndIngredients func(childComplexity int) int
		OwnersAndFounders       func(childComplexity int) int
		ProductCertifications   func(childComplexity int) int
		PurchaseInfo            func(childComplexity int) int
		Section                 func(childComplexity int) int
		Style                   func(childComplexity int) int
		SubCategory             func(childComplexity int) int
		Subsection              func(childComplexity int) int
		Title                   func(childComplexity int) int
		Type                    func(childComplexity int) int
		Verified                func(childComplexity int) int
		VerifiedBy              func(childComplexity int) int
	}

	PurchaseInfo struct {
		Company func(childComplexity int) int
		Link    func(childComplexity int) int
		Price   func(childComplexity int) int
		Rating  func(childComplexity int) int
	}

	Query struct {
		BaseQuery            func(childComplexity int) int
		GetAllCategories     func(childComplexity int) int
		GetAllCertifications func(childComplexity int) int
		GetAllCompanies      func(childComplexity int) int
		GetCompany           func(childComplexity int, id string) int
		User                 func(childComplexity int, id string) int
		Users                func(childComplexity int) int
	}

	User struct {
		Email     func(childComplexity int) int
		FirstName func(childComplexity int) int
		ID        func(childComplexity int) int
		LastName  func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Category.Children":
		if e.complexity.Category.Children == nil {
			break
		}

		return e.complexity.Category.Children(childComplexity), true

	case "Category._id":
		if e.complexity.Category.ID == nil {
			break
		}

		return e.complexity.Category.ID(childComplexity), true

	case "Category.Name":
		if e.complexity.Category.Name == nil {
			break
		}

		return e.complexity.Category.Name(childComplexity), true

	case "Category.ParentID":
		if e.complexity.Category.ParentID == nil {
			break
		}

		return e.complexity.Category.ParentID(childComplexity), true

	case "Category.Type":
		if e.complexity.Category.Type == nil {
			break
		}

		return e.complexity.Category.Type(childComplexity), true

	case "Certification.Audited":
		if e.complexity.Certification.Audited == nil {
			break
		}

		return e.complexity.Certification.Audited(childComplexity), true

	case "Certification.Auditor":
		if e.complexity.Certification.Auditor == nil {
			break
		}

		return e.complexity.Certification.Auditor(childComplexity), true

	case "Certification.Certifier":
		if e.complexity.Certification.Certifier == nil {
			break
		}

		return e.complexity.Certification.Certifier(childComplexity), true

	case "Certification.CertifierContactID":
		if e.complexity.Certification.CertifierContactID == nil {
			break
		}

		return e.complexity.Certification.CertifierContactID(childComplexity), true

	case "Certification.CertifiesCompany":
		if e.complexity.Certification.CertifiesCompany == nil {
			break
		}

		return e.complexity.Certification.CertifiesCompany(childComplexity), true

	case "Certification.CertifiesProcess":
		if e.complexity.Certification.CertifiesProcess == nil {
			break
		}

		return e.complexity.Certification.CertifiesProcess(childComplexity), true

	case "Certification.CertifiesProduct":
		if e.complexity.Certification.CertifiesProduct == nil {
			break
		}

		return e.complexity.Certification.CertifiesProduct(childComplexity), true

	case "Certification.CreatedAt":
		if e.complexity.Certification.CreatedAt == nil {
			break
		}

		return e.complexity.Certification.CreatedAt(childComplexity), true

	case "Certification.Description":
		if e.complexity.Certification.Description == nil {
			break
		}

		return e.complexity.Certification.Description(childComplexity), true

	case "Certification._id":
		if e.complexity.Certification.ID == nil {
			break
		}

		return e.complexity.Certification.ID(childComplexity), true

	case "Certification.Industry":
		if e.complexity.Certification.Industry == nil {
			break
		}

		return e.complexity.Certification.Industry(childComplexity), true

	case "Certification.Logo":
		if e.complexity.Certification.Logo == nil {
			break
		}

		return e.complexity.Certification.Logo(childComplexity), true

	case "Certification.Name":
		if e.complexity.Certification.Name == nil {
			break
		}

		return e.complexity.Certification.Name(childComplexity), true

	case "Certification.Qualifiers":
		if e.complexity.Certification.Qualifiers == nil {
			break
		}

		return e.complexity.Certification.Qualifiers(childComplexity), true

	case "Certification.Region":
		if e.complexity.Certification.Region == nil {
			break
		}

		return e.complexity.Certification.Region(childComplexity), true

	case "Certification.Sources":
		if e.complexity.Certification.Sources == nil {
			break
		}

		return e.complexity.Certification.Sources(childComplexity), true

	case "Certification.UpdatedAt":
		if e.complexity.Certification.UpdatedAt == nil {
			break
		}

		return e.complexity.Certification.UpdatedAt(childComplexity), true

	case "Certification.Website":
		if e.complexity.Certification.Website == nil {
			break
		}

		return e.complexity.Certification.Website(childComplexity), true

	case "Company.city":
		if e.complexity.Company.City == nil {
			break
		}

		return e.complexity.Company.City(childComplexity), true

	case "Company.country":
		if e.complexity.Company.Country == nil {
			break
		}

		return e.complexity.Company.Country(childComplexity), true

	case "Company.description":
		if e.complexity.Company.Description == nil {
			break
		}

		return e.complexity.Company.Description(childComplexity), true

	case "Company._id":
		if e.complexity.Company.ID == nil {
			break
		}

		return e.complexity.Company.ID(childComplexity), true

	case "Company.isVerified":
		if e.complexity.Company.IsVerified == nil {
			break
		}

		return e.complexity.Company.IsVerified(childComplexity), true

	case "Company.logo":
		if e.complexity.Company.Logo == nil {
			break
		}

		return e.complexity.Company.Logo(childComplexity), true

	case "Company.name":
		if e.complexity.Company.Name == nil {
			break
		}

		return e.complexity.Company.Name(childComplexity), true

	case "Company.state":
		if e.complexity.Company.State == nil {
			break
		}

		return e.complexity.Company.State(childComplexity), true

	case "Company.url":
		if e.complexity.Company.URL == nil {
			break
		}

		return e.complexity.Company.URL(childComplexity), true

	case "Company.user":
		if e.complexity.Company.User == nil {
			break
		}

		return e.complexity.Company.User(childComplexity), true

	case "Favourite.id":
		if e.complexity.Favourite.ID == nil {
			break
		}

		return e.complexity.Favourite.ID(childComplexity), true

	case "Favourite.product":
		if e.complexity.Favourite.Product == nil {
			break
		}

		return e.complexity.Favourite.Product(childComplexity), true

	case "Favourite.user":
		if e.complexity.Favourite.User == nil {
			break
		}

		return e.complexity.Favourite.User(childComplexity), true

	case "Image._id":
		if e.complexity.Image.ID == nil {
			break
		}

		return e.complexity.Image.ID(childComplexity), true

	case "Image.Location":
		if e.complexity.Image.Location == nil {
			break
		}

		return e.complexity.Image.Location(childComplexity), true

	case "Mutation.addCategory":
		if e.complexity.Mutation.AddCategory == nil {
			break
		}

		args, err := ec.field_Mutation_addCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCategory(childComplexity, args["input"].(model.AddCategory)), true

	case "Mutation.addCertification":
		if e.complexity.Mutation.AddCertification == nil {
			break
		}

		args, err := ec.field_Mutation_addCertification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCertification(childComplexity, args["input"].(model.AddCertification)), true

	case "Mutation.addCompany":
		if e.complexity.Mutation.AddCompany == nil {
			break
		}

		args, err := ec.field_Mutation_addCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCompany(childComplexity, args["request"].(model.AddCompany)), true

	case "Mutation.addFav":
		if e.complexity.Mutation.AddFav == nil {
			break
		}

		args, err := ec.field_Mutation_addFav_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddFav(childComplexity, args["request"].(model.AddUserFav)), true

	case "Mutation.addProduct":
		if e.complexity.Mutation.AddProduct == nil {
			break
		}

		args, err := ec.field_Mutation_addProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddProduct(childComplexity, args["request"].(model.AddProductRequest)), true

	case "Mutation.addUser":
		if e.complexity.Mutation.AddUser == nil {
			break
		}

		args, err := ec.field_Mutation_addUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUser(childComplexity, args["input"].(model.NewUser)), true

	case "Mutation.BaseMutation":
		if e.complexity.Mutation.BaseMutation == nil {
			break
		}

		return e.complexity.Mutation.BaseMutation(childComplexity), true

	case "Mutation.updateCertification":
		if e.complexity.Mutation.UpdateCertification == nil {
			break
		}

		args, err := ec.field_Mutation_updateCertification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCertification(childComplexity, args["input"].(model.UpdateCertification)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(model.UpdateUser)), true

	case "Product.Category":
		if e.complexity.Product.Category == nil {
			break
		}

		return e.complexity.Product.Category(childComplexity), true

	case "Product.Certification":
		if e.complexity.Product.Certification == nil {
			break
		}

		return e.complexity.Product.Certification(childComplexity), true

	case "Product.CompanyCertifications":
		if e.complexity.Product.CompanyCertifications == nil {
			break
		}

		return e.complexity.Product.CompanyCertifications(childComplexity), true

	case "Product.Department":
		if e.complexity.Product.Department == nil {
			break
		}

		return e.complexity.Product.Department(childComplexity), true

	case "Product.Description":
		if e.complexity.Product.Description == nil {
			break
		}

		return e.complexity.Product.Description(childComplexity), true

	case "Product.GiveBackPrograms":
		if e.complexity.Product.GiveBackPrograms == nil {
			break
		}

		return e.complexity.Product.GiveBackPrograms(childComplexity), true

	case "Product._id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.ImageLinks":
		if e.complexity.Product.ImageLinks == nil {
			break
		}

		return e.complexity.Product.ImageLinks(childComplexity), true

	case "Product.MaterialsAndIngredients":
		if e.complexity.Product.MaterialsAndIngredients == nil {
			break
		}

		return e.complexity.Product.MaterialsAndIngredients(childComplexity), true

	case "Product.OwnersAndFounders":
		if e.complexity.Product.OwnersAndFounders == nil {
			break
		}

		return e.complexity.Product.OwnersAndFounders(childComplexity), true

	case "Product.ProductCertifications":
		if e.complexity.Product.ProductCertifications == nil {
			break
		}

		return e.complexity.Product.ProductCertifications(childComplexity), true

	case "Product.PurchaseInfo":
		if e.complexity.Product.PurchaseInfo == nil {
			break
		}

		return e.complexity.Product.PurchaseInfo(childComplexity), true

	case "Product.Section":
		if e.complexity.Product.Section == nil {
			break
		}

		return e.complexity.Product.Section(childComplexity), true

	case "Product.Style":
		if e.complexity.Product.Style == nil {
			break
		}

		return e.complexity.Product.Style(childComplexity), true

	case "Product.SubCategory":
		if e.complexity.Product.SubCategory == nil {
			break
		}

		return e.complexity.Product.SubCategory(childComplexity), true

	case "Product.Subsection":
		if e.complexity.Product.Subsection == nil {
			break
		}

		return e.complexity.Product.Subsection(childComplexity), true

	case "Product.Title":
		if e.complexity.Product.Title == nil {
			break
		}

		return e.complexity.Product.Title(childComplexity), true

	case "Product.Type":
		if e.complexity.Product.Type == nil {
			break
		}

		return e.complexity.Product.Type(childComplexity), true

	case "Product.Verified":
		if e.complexity.Product.Verified == nil {
			break
		}

		return e.complexity.Product.Verified(childComplexity), true

	case "Product.VerifiedBy":
		if e.complexity.Product.VerifiedBy == nil {
			break
		}

		return e.complexity.Product.VerifiedBy(childComplexity), true

	case "PurchaseInfo.Company":
		if e.complexity.PurchaseInfo.Company == nil {
			break
		}

		return e.complexity.PurchaseInfo.Company(childComplexity), true

	case "PurchaseInfo.Link":
		if e.complexity.PurchaseInfo.Link == nil {
			break
		}

		return e.complexity.PurchaseInfo.Link(childComplexity), true

	case "PurchaseInfo.Price":
		if e.complexity.PurchaseInfo.Price == nil {
			break
		}

		return e.complexity.PurchaseInfo.Price(childComplexity), true

	case "PurchaseInfo.Rating":
		if e.complexity.PurchaseInfo.Rating == nil {
			break
		}

		return e.complexity.PurchaseInfo.Rating(childComplexity), true

	case "Query.BaseQuery":
		if e.complexity.Query.BaseQuery == nil {
			break
		}

		return e.complexity.Query.BaseQuery(childComplexity), true

	case "Query.getAllCategories":
		if e.complexity.Query.GetAllCategories == nil {
			break
		}

		return e.complexity.Query.GetAllCategories(childComplexity), true

	case "Query.getAllCertifications":
		if e.complexity.Query.GetAllCertifications == nil {
			break
		}

		return e.complexity.Query.GetAllCertifications(childComplexity), true

	case "Query.getAllCompanies":
		if e.complexity.Query.GetAllCompanies == nil {
			break
		}

		return e.complexity.Query.GetAllCompanies(childComplexity), true

	case "Query.getCompany":
		if e.complexity.Query.GetCompany == nil {
			break
		}

		args, err := ec.field_Query_getCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompany(childComplexity, args["id"].(string)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["_id"].(string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		return e.complexity.Query.Users(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User._id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAddCategory,
		ec.unmarshalInputAddCertification,
		ec.unmarshalInputAddCompany,
		ec.unmarshalInputAddProductRequest,
		ec.unmarshalInputAddUserFav,
		ec.unmarshalInputCategorizationInput,
		ec.unmarshalInputNewUser,
		ec.unmarshalInputPurchaseInfoInput,
		ec.unmarshalInputUpdateCertification,
		ec.unmarshalInputUpdateUser,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../certification.graphqls", Input: `extend type Mutation {
    addCertification(input: AddCertification!): Certification!
    updateCertification(input: UpdateCertification!): Certification!
}

extend type Query {
    getAllCertifications: [Certification]!
}

input UpdateCertification {
    ID: String!
    Name: String
    Logo: String
    Website: String
    Description: String
    CertifiesCompany: Boolean
    CertifiesProduct: Boolean
    CertifiesProcess: Boolean
    CertifierContactID: String
    Industry: String
    Certifier: String
    Audited: Boolean
    Auditor: String
    Region: String
    Qualifiers: String
    Sources: String
}

input AddCertification {
    Name: String
    Logo: String
    Website: String
    Description: String
    CertifiesCompany: Boolean
    CertifiesProduct: Boolean
    CertifiesProcess: Boolean
    CertifierContactID: String
    Industry: String
    Certifier: String
    Audited: Boolean
    Auditor: String
    Region: String
    Qualifiers: String
    Sources: String
}

type Certification {
    _id: String!
    Name: String!
    Logo: String
    Website: String
    Description: String
    CertifiesCompany: Boolean
    CertifiesProduct: Boolean
    CertifiesProcess: Boolean
    CertifierContactID: String
    Industry: String
    Certifier: String
    Audited: Boolean
    Auditor: String
    Region: String
    Qualifiers: String
    Sources: String
    CreatedAt: String
    UpdatedAt: String
}`, BuiltIn: false},
	{Name: "../company.graphqls", Input: `
extend type Mutation {
    addCompany(request: AddCompany!): Company!
}

extend type Query {
    getCompany(id: String!): Company!
    getAllCompanies: [Company!]
}

type Company {
    _id: String
    name: String
    url: String
    description: String
    city: String
    state: String
    country: String
    user: User
    isVerified: Boolean
    logo: String
}

input AddCompany {
    name: String
    url: String
    description: String
    city: String
    state: String
    country: String
    isVerified: Boolean
    logo: String
    certifications: [AddCertification]
}`, BuiltIn: false},
	{Name: "../favorite.graphqls", Input: `extend type Mutation {
    addFav(request: AddUserFav!): [Favourite]
}

type Favourite {
    id: ID!
    user: User!
    product: Product!
}

input AddUserFav {
    userId: String!
    productId: String!
}
`, BuiltIn: false},
	{Name: "../prodCategorization.graphqls", Input: `

extend type Mutation {
    addCategory(input: AddCategory!): Category!
}

extend type Query {
    getAllCategories:[Category]!
}

# ======= INPUTS ======

input AddCategory {
    Name: String!
    ParentID: String
    Type: CategoryEnum!
}

enum CategoryEnum {
    Section, Subsection, Department, Category, SubCategory, Type, SubType
}

# ======= TYPES ======
type Category {
    _id: String!
    ParentID: String
    Type: String
    Name: String!
    Children: [Category]
}


#type Section {
#    _id: String!
#    Title: String!
#    SubSections: [SubSection]
#}
#
#type SubSection {
#    _id: String!
#    Title: String!
#    Departments: [Department]
#}

#type Department {
#    _id: String!
#    Title: String!
#    Categories: [Category]
#}
#
#type SubCategory {
#    _id: String!
#    Title: String!
#    Types: [Type]
#}
#
#type Type {
#    _id: String!
#    Title: String!
#    SubTypes: [SubType]
#}
#
#type SubType {
#    _id: String!
#    Title: String!
#}

#enum FilterType {
#    color, style, shape, material, setting, scent, pattern, chainType, closureType, cutType, gemstone, location,
#    holiday, occasion, size, mount, fillMaterial, height, length
#}

`, BuiltIn: false},
	{Name: "../product.graphqls", Input: `extend type Mutation {
    addProduct(request: AddProductRequest!): Product!
}

input AddProductRequest {
    Title: String!
    Description: String!
    Categorization: CategorizationInput!
    Certifications: [Int]
    PurchaseInfo: PurchaseInfoInput!
    ImageLinks: [String]
}

input PurchaseInfoInput {
    Price: String!
    Link: String!
    Rating: String
    Company: String
    IfOtherCompany: String
}



input CategorizationInput {
    Section: String
    SubSection: String
    Department: String
    Category: String
    SubCategory:String
    Type: String
    Style: String
}

type Product {
    _id: String!
    Title: String!
    Description: String!
    Certification: Certification!
    ProductCertifications: [String]
    CompanyCertifications:[String]
    MaterialsAndIngredients: [String]
    GiveBackPrograms: [String]
    OwnersAndFounders: [String]
    Section: String
    Subsection: String
    Department: [String]
    Category: String
    SubCategory: String
    Type: String
    Style: String
    ImageLinks: [String]
    PurchaseInfo: [PurchaseInfo]
    Verified: Boolean
    VerifiedBy: [String]
}

type PurchaseInfo {
    Price: String
    Link: String
    Company: String
    Rating: String
}`, BuiltIn: false},
	{Name: "../schema.graphqls", Input: `
schema {
  query: Query
  mutation: Mutation
}
type Query {
  BaseQuery: Any
}

type Mutation {
  BaseMutation: Any
}


scalar Any`, BuiltIn: false},
	{Name: "../user.graphqls", Input: `extend type Query {
    user(_id: String!): User!
    users: [User]!
}

extend type Mutation {
    addUser(input: NewUser!): User!
    updateUser(input: UpdateUser!): User!
}

type Image {
    _id: String!
    Location: String!
}

type User {
    _id: String!
    firstName: String!
    lastName: String!
    email: String!
}

input NewUser {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
}

input UpdateUser {
    userId: String!
    firstName: String
    lastName: String
    email: String
    password: String
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
