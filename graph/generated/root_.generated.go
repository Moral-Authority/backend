// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/Moral-Authority/backend/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Category struct {
		Children func(childComplexity int) int
		ID       func(childComplexity int) int
		Name     func(childComplexity int) int
		ParentID func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	Certification struct {
		Audited            func(childComplexity int) int
		Auditor            func(childComplexity int) int
		Certifier          func(childComplexity int) int
		CertifierContactID func(childComplexity int) int
		CertifiesCompany   func(childComplexity int) int
		CertifiesProcess   func(childComplexity int) int
		CertifiesProduct   func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Description        func(childComplexity int) int
		ID                 func(childComplexity int) int
		Industry           func(childComplexity int) int
		Logo               func(childComplexity int) int
		Name               func(childComplexity int) int
		Qualifiers         func(childComplexity int) int
		Region             func(childComplexity int) int
		Sources            func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		Website            func(childComplexity int) int
	}

	Company struct {
		City                  func(childComplexity int) int
		CompanyCertifications func(childComplexity int) int
		CompanyProducts       func(childComplexity int) int
		Country               func(childComplexity int) int
		Description           func(childComplexity int) int
		ID                    func(childComplexity int) int
		IsVerified            func(childComplexity int) int
		Logo                  func(childComplexity int) int
		Name                  func(childComplexity int) int
		State                 func(childComplexity int) int
		URL                   func(childComplexity int) int
		User                  func(childComplexity int) int
	}

	CompanyCertification struct {
		Certification  func(childComplexity int) int
		CertifiedAt    func(childComplexity int) int
		Company        func(childComplexity int) int
		ExpirationDate func(childComplexity int) int
		OtherDetails   func(childComplexity int) int
	}

	CompanyProduct struct {
		Company        func(childComplexity int) int
		DiscontinuedAt func(childComplexity int) int
		LaunchedAt     func(childComplexity int) int
		OtherDetails   func(childComplexity int) int
		Product        func(childComplexity int) int
	}

	Favorite struct {
		ID      func(childComplexity int) int
		Product func(childComplexity int) int
		User    func(childComplexity int) int
	}

	Image struct {
		ID        func(childComplexity int) int
		ProductID func(childComplexity int) int
		URL       func(childComplexity int) int
	}

	LoginResponse struct {
		Token func(childComplexity int) int
		User  func(childComplexity int) int
	}

	Mutation struct {
		AddCategory             func(childComplexity int, input model.AddCategory) int
		AddCertification        func(childComplexity int, input model.AddCertification) int
		AddCompany              func(childComplexity int, input model.AddCompany) int
		AddImage                func(childComplexity int, request model.AddImage) int
		AddProduct              func(childComplexity int, input model.AddProductRequest) int
		AddProductCertification func(childComplexity int, input model.ProductCertificationInput) int
		AddUser                 func(childComplexity int, input model.NewUser) int
		BaseMutation            func(childComplexity int) int
		Login                   func(childComplexity int, input model.LoginUser) int
		ToggleUserFav           func(childComplexity int, request model.ToggleUserFav) int
		UpdateCertification     func(childComplexity int, input model.UpdateCertification) int
		UpdateCompany           func(childComplexity int, input model.UpdateCompany) int
		UpdateImage             func(childComplexity int, request model.UpdateImage) int
		UpdateProduct           func(childComplexity int, input model.UpdateProductRequest) int
		UpdateUser              func(childComplexity int, input model.UpdateUser) int
	}

	PaginatedCertifications struct {
		Certifications func(childComplexity int) int
		CurrentPage    func(childComplexity int) int
		Description    func(childComplexity int) int
		ItemsPerPage   func(childComplexity int) int
		TotalItems     func(childComplexity int) int
		TotalPages     func(childComplexity int) int
	}

	Product struct {
		Category                func(childComplexity int) int
		Company                 func(childComplexity int) int
		Department              func(childComplexity int) int
		Description             func(childComplexity int) int
		GiveBackPrograms        func(childComplexity int) int
		ID                      func(childComplexity int) int
		ImageLinks              func(childComplexity int) int
		MaterialsAndIngredients func(childComplexity int) int
		OwnersAndFounders       func(childComplexity int) int
		ProductCertifications   func(childComplexity int) int
		PurchaseInfo            func(childComplexity int) int
		Section                 func(childComplexity int) int
		Style                   func(childComplexity int) int
		SubCategory             func(childComplexity int) int
		Subsection              func(childComplexity int) int
		Title                   func(childComplexity int) int
		Type                    func(childComplexity int) int
		Verified                func(childComplexity int) int
		VerifiedBy              func(childComplexity int) int
	}

	ProductCertification struct {
		Certification  func(childComplexity int) int
		CertifiedAt    func(childComplexity int) int
		ExpirationDate func(childComplexity int) int
		OtherDetails   func(childComplexity int) int
		Product        func(childComplexity int) int
	}

	PurchaseInfo struct {
		Company func(childComplexity int) int
		Link    func(childComplexity int) int
		Price   func(childComplexity int) int
		Rating  func(childComplexity int) int
	}

	Query struct {
		BaseQuery                 func(childComplexity int) int
		GetAllCategories          func(childComplexity int) int
		GetAllCertifications      func(childComplexity int) int
		GetAllCompanies           func(childComplexity int) int
		GetAllProducts            func(childComplexity int) int
		GetCertificationByID      func(childComplexity int, id string) int
		GetCertificationsByFilter func(childComplexity int, input model.FilterCertificationsInput) int
		GetCompaniesByFilter      func(childComplexity int, filter *model.FilterCompanyInput) int
		GetCompany                func(childComplexity int, id string) int
		GetProductByID            func(childComplexity int, id string) int
		User                      func(childComplexity int, id string) int
		Users                     func(childComplexity int) int
	}

	User struct {
		Email    func(childComplexity int) int
		ID       func(childComplexity int) int
		Password func(childComplexity int) int
		Phone    func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Category.Children":
		if e.complexity.Category.Children == nil {
			break
		}

		return e.complexity.Category.Children(childComplexity), true

	case "Category._id":
		if e.complexity.Category.ID == nil {
			break
		}

		return e.complexity.Category.ID(childComplexity), true

	case "Category.Name":
		if e.complexity.Category.Name == nil {
			break
		}

		return e.complexity.Category.Name(childComplexity), true

	case "Category.ParentID":
		if e.complexity.Category.ParentID == nil {
			break
		}

		return e.complexity.Category.ParentID(childComplexity), true

	case "Category.Type":
		if e.complexity.Category.Type == nil {
			break
		}

		return e.complexity.Category.Type(childComplexity), true

	case "Certification.Audited":
		if e.complexity.Certification.Audited == nil {
			break
		}

		return e.complexity.Certification.Audited(childComplexity), true

	case "Certification.Auditor":
		if e.complexity.Certification.Auditor == nil {
			break
		}

		return e.complexity.Certification.Auditor(childComplexity), true

	case "Certification.Certifier":
		if e.complexity.Certification.Certifier == nil {
			break
		}

		return e.complexity.Certification.Certifier(childComplexity), true

	case "Certification.CertifierContactID":
		if e.complexity.Certification.CertifierContactID == nil {
			break
		}

		return e.complexity.Certification.CertifierContactID(childComplexity), true

	case "Certification.CertifiesCompany":
		if e.complexity.Certification.CertifiesCompany == nil {
			break
		}

		return e.complexity.Certification.CertifiesCompany(childComplexity), true

	case "Certification.CertifiesProcess":
		if e.complexity.Certification.CertifiesProcess == nil {
			break
		}

		return e.complexity.Certification.CertifiesProcess(childComplexity), true

	case "Certification.CertifiesProduct":
		if e.complexity.Certification.CertifiesProduct == nil {
			break
		}

		return e.complexity.Certification.CertifiesProduct(childComplexity), true

	case "Certification.CreatedAt":
		if e.complexity.Certification.CreatedAt == nil {
			break
		}

		return e.complexity.Certification.CreatedAt(childComplexity), true

	case "Certification.Description":
		if e.complexity.Certification.Description == nil {
			break
		}

		return e.complexity.Certification.Description(childComplexity), true

	case "Certification._id":
		if e.complexity.Certification.ID == nil {
			break
		}

		return e.complexity.Certification.ID(childComplexity), true

	case "Certification.Industry":
		if e.complexity.Certification.Industry == nil {
			break
		}

		return e.complexity.Certification.Industry(childComplexity), true

	case "Certification.Logo":
		if e.complexity.Certification.Logo == nil {
			break
		}

		return e.complexity.Certification.Logo(childComplexity), true

	case "Certification.Name":
		if e.complexity.Certification.Name == nil {
			break
		}

		return e.complexity.Certification.Name(childComplexity), true

	case "Certification.Qualifiers":
		if e.complexity.Certification.Qualifiers == nil {
			break
		}

		return e.complexity.Certification.Qualifiers(childComplexity), true

	case "Certification.Region":
		if e.complexity.Certification.Region == nil {
			break
		}

		return e.complexity.Certification.Region(childComplexity), true

	case "Certification.Sources":
		if e.complexity.Certification.Sources == nil {
			break
		}

		return e.complexity.Certification.Sources(childComplexity), true

	case "Certification.UpdatedAt":
		if e.complexity.Certification.UpdatedAt == nil {
			break
		}

		return e.complexity.Certification.UpdatedAt(childComplexity), true

	case "Certification.Website":
		if e.complexity.Certification.Website == nil {
			break
		}

		return e.complexity.Certification.Website(childComplexity), true

	case "Company.city":
		if e.complexity.Company.City == nil {
			break
		}

		return e.complexity.Company.City(childComplexity), true

	case "Company.companyCertifications":
		if e.complexity.Company.CompanyCertifications == nil {
			break
		}

		return e.complexity.Company.CompanyCertifications(childComplexity), true

	case "Company.companyProducts":
		if e.complexity.Company.CompanyProducts == nil {
			break
		}

		return e.complexity.Company.CompanyProducts(childComplexity), true

	case "Company.country":
		if e.complexity.Company.Country == nil {
			break
		}

		return e.complexity.Company.Country(childComplexity), true

	case "Company.description":
		if e.complexity.Company.Description == nil {
			break
		}

		return e.complexity.Company.Description(childComplexity), true

	case "Company._id":
		if e.complexity.Company.ID == nil {
			break
		}

		return e.complexity.Company.ID(childComplexity), true

	case "Company.isVerified":
		if e.complexity.Company.IsVerified == nil {
			break
		}

		return e.complexity.Company.IsVerified(childComplexity), true

	case "Company.logo":
		if e.complexity.Company.Logo == nil {
			break
		}

		return e.complexity.Company.Logo(childComplexity), true

	case "Company.name":
		if e.complexity.Company.Name == nil {
			break
		}

		return e.complexity.Company.Name(childComplexity), true

	case "Company.state":
		if e.complexity.Company.State == nil {
			break
		}

		return e.complexity.Company.State(childComplexity), true

	case "Company.url":
		if e.complexity.Company.URL == nil {
			break
		}

		return e.complexity.Company.URL(childComplexity), true

	case "Company.user":
		if e.complexity.Company.User == nil {
			break
		}

		return e.complexity.Company.User(childComplexity), true

	case "CompanyCertification.certification":
		if e.complexity.CompanyCertification.Certification == nil {
			break
		}

		return e.complexity.CompanyCertification.Certification(childComplexity), true

	case "CompanyCertification.certifiedAt":
		if e.complexity.CompanyCertification.CertifiedAt == nil {
			break
		}

		return e.complexity.CompanyCertification.CertifiedAt(childComplexity), true

	case "CompanyCertification.company":
		if e.complexity.CompanyCertification.Company == nil {
			break
		}

		return e.complexity.CompanyCertification.Company(childComplexity), true

	case "CompanyCertification.expirationDate":
		if e.complexity.CompanyCertification.ExpirationDate == nil {
			break
		}

		return e.complexity.CompanyCertification.ExpirationDate(childComplexity), true

	case "CompanyCertification.otherDetails":
		if e.complexity.CompanyCertification.OtherDetails == nil {
			break
		}

		return e.complexity.CompanyCertification.OtherDetails(childComplexity), true

	case "CompanyProduct.company":
		if e.complexity.CompanyProduct.Company == nil {
			break
		}

		return e.complexity.CompanyProduct.Company(childComplexity), true

	case "CompanyProduct.discontinuedAt":
		if e.complexity.CompanyProduct.DiscontinuedAt == nil {
			break
		}

		return e.complexity.CompanyProduct.DiscontinuedAt(childComplexity), true

	case "CompanyProduct.launchedAt":
		if e.complexity.CompanyProduct.LaunchedAt == nil {
			break
		}

		return e.complexity.CompanyProduct.LaunchedAt(childComplexity), true

	case "CompanyProduct.otherDetails":
		if e.complexity.CompanyProduct.OtherDetails == nil {
			break
		}

		return e.complexity.CompanyProduct.OtherDetails(childComplexity), true

	case "CompanyProduct.product":
		if e.complexity.CompanyProduct.Product == nil {
			break
		}

		return e.complexity.CompanyProduct.Product(childComplexity), true

	case "Favorite.id":
		if e.complexity.Favorite.ID == nil {
			break
		}

		return e.complexity.Favorite.ID(childComplexity), true

	case "Favorite.product":
		if e.complexity.Favorite.Product == nil {
			break
		}

		return e.complexity.Favorite.Product(childComplexity), true

	case "Favorite.user":
		if e.complexity.Favorite.User == nil {
			break
		}

		return e.complexity.Favorite.User(childComplexity), true

	case "Image.id":
		if e.complexity.Image.ID == nil {
			break
		}

		return e.complexity.Image.ID(childComplexity), true

	case "Image.productID":
		if e.complexity.Image.ProductID == nil {
			break
		}

		return e.complexity.Image.ProductID(childComplexity), true

	case "Image.url":
		if e.complexity.Image.URL == nil {
			break
		}

		return e.complexity.Image.URL(childComplexity), true

	case "LoginResponse.token":
		if e.complexity.LoginResponse.Token == nil {
			break
		}

		return e.complexity.LoginResponse.Token(childComplexity), true

	case "LoginResponse.user":
		if e.complexity.LoginResponse.User == nil {
			break
		}

		return e.complexity.LoginResponse.User(childComplexity), true

	case "Mutation.addCategory":
		if e.complexity.Mutation.AddCategory == nil {
			break
		}

		args, err := ec.field_Mutation_addCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCategory(childComplexity, args["input"].(model.AddCategory)), true

	case "Mutation.addCertification":
		if e.complexity.Mutation.AddCertification == nil {
			break
		}

		args, err := ec.field_Mutation_addCertification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCertification(childComplexity, args["input"].(model.AddCertification)), true

	case "Mutation.addCompany":
		if e.complexity.Mutation.AddCompany == nil {
			break
		}

		args, err := ec.field_Mutation_addCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddCompany(childComplexity, args["input"].(model.AddCompany)), true

	case "Mutation.addImage":
		if e.complexity.Mutation.AddImage == nil {
			break
		}

		args, err := ec.field_Mutation_addImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddImage(childComplexity, args["request"].(model.AddImage)), true

	case "Mutation.addProduct":
		if e.complexity.Mutation.AddProduct == nil {
			break
		}

		args, err := ec.field_Mutation_addProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddProduct(childComplexity, args["input"].(model.AddProductRequest)), true

	case "Mutation.addProductCertification":
		if e.complexity.Mutation.AddProductCertification == nil {
			break
		}

		args, err := ec.field_Mutation_addProductCertification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddProductCertification(childComplexity, args["input"].(model.ProductCertificationInput)), true

	case "Mutation.addUser":
		if e.complexity.Mutation.AddUser == nil {
			break
		}

		args, err := ec.field_Mutation_addUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUser(childComplexity, args["input"].(model.NewUser)), true

	case "Mutation.BaseMutation":
		if e.complexity.Mutation.BaseMutation == nil {
			break
		}

		return e.complexity.Mutation.BaseMutation(childComplexity), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["input"].(model.LoginUser)), true

	case "Mutation.toggleUserFav":
		if e.complexity.Mutation.ToggleUserFav == nil {
			break
		}

		args, err := ec.field_Mutation_toggleUserFav_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ToggleUserFav(childComplexity, args["request"].(model.ToggleUserFav)), true

	case "Mutation.updateCertification":
		if e.complexity.Mutation.UpdateCertification == nil {
			break
		}

		args, err := ec.field_Mutation_updateCertification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCertification(childComplexity, args["input"].(model.UpdateCertification)), true

	case "Mutation.updateCompany":
		if e.complexity.Mutation.UpdateCompany == nil {
			break
		}

		args, err := ec.field_Mutation_updateCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCompany(childComplexity, args["input"].(model.UpdateCompany)), true

	case "Mutation.UpdateImage":
		if e.complexity.Mutation.UpdateImage == nil {
			break
		}

		args, err := ec.field_Mutation_UpdateImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateImage(childComplexity, args["request"].(model.UpdateImage)), true

	case "Mutation.updateProduct":
		if e.complexity.Mutation.UpdateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_updateProduct_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProduct(childComplexity, args["input"].(model.UpdateProductRequest)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(model.UpdateUser)), true

	case "PaginatedCertifications.Certifications":
		if e.complexity.PaginatedCertifications.Certifications == nil {
			break
		}

		return e.complexity.PaginatedCertifications.Certifications(childComplexity), true

	case "PaginatedCertifications.CurrentPage":
		if e.complexity.PaginatedCertifications.CurrentPage == nil {
			break
		}

		return e.complexity.PaginatedCertifications.CurrentPage(childComplexity), true

	case "PaginatedCertifications.Description":
		if e.complexity.PaginatedCertifications.Description == nil {
			break
		}

		return e.complexity.PaginatedCertifications.Description(childComplexity), true

	case "PaginatedCertifications.ItemsPerPage":
		if e.complexity.PaginatedCertifications.ItemsPerPage == nil {
			break
		}

		return e.complexity.PaginatedCertifications.ItemsPerPage(childComplexity), true

	case "PaginatedCertifications.TotalItems":
		if e.complexity.PaginatedCertifications.TotalItems == nil {
			break
		}

		return e.complexity.PaginatedCertifications.TotalItems(childComplexity), true

	case "PaginatedCertifications.TotalPages":
		if e.complexity.PaginatedCertifications.TotalPages == nil {
			break
		}

		return e.complexity.PaginatedCertifications.TotalPages(childComplexity), true

	case "Product.Category":
		if e.complexity.Product.Category == nil {
			break
		}

		return e.complexity.Product.Category(childComplexity), true

	case "Product.company":
		if e.complexity.Product.Company == nil {
			break
		}

		return e.complexity.Product.Company(childComplexity), true

	case "Product.Department":
		if e.complexity.Product.Department == nil {
			break
		}

		return e.complexity.Product.Department(childComplexity), true

	case "Product.Description":
		if e.complexity.Product.Description == nil {
			break
		}

		return e.complexity.Product.Description(childComplexity), true

	case "Product.GiveBackPrograms":
		if e.complexity.Product.GiveBackPrograms == nil {
			break
		}

		return e.complexity.Product.GiveBackPrograms(childComplexity), true

	case "Product._id":
		if e.complexity.Product.ID == nil {
			break
		}

		return e.complexity.Product.ID(childComplexity), true

	case "Product.ImageLinks":
		if e.complexity.Product.ImageLinks == nil {
			break
		}

		return e.complexity.Product.ImageLinks(childComplexity), true

	case "Product.MaterialsAndIngredients":
		if e.complexity.Product.MaterialsAndIngredients == nil {
			break
		}

		return e.complexity.Product.MaterialsAndIngredients(childComplexity), true

	case "Product.OwnersAndFounders":
		if e.complexity.Product.OwnersAndFounders == nil {
			break
		}

		return e.complexity.Product.OwnersAndFounders(childComplexity), true

	case "Product.productCertifications":
		if e.complexity.Product.ProductCertifications == nil {
			break
		}

		return e.complexity.Product.ProductCertifications(childComplexity), true

	case "Product.PurchaseInfo":
		if e.complexity.Product.PurchaseInfo == nil {
			break
		}

		return e.complexity.Product.PurchaseInfo(childComplexity), true

	case "Product.Section":
		if e.complexity.Product.Section == nil {
			break
		}

		return e.complexity.Product.Section(childComplexity), true

	case "Product.Style":
		if e.complexity.Product.Style == nil {
			break
		}

		return e.complexity.Product.Style(childComplexity), true

	case "Product.SubCategory":
		if e.complexity.Product.SubCategory == nil {
			break
		}

		return e.complexity.Product.SubCategory(childComplexity), true

	case "Product.Subsection":
		if e.complexity.Product.Subsection == nil {
			break
		}

		return e.complexity.Product.Subsection(childComplexity), true

	case "Product.Title":
		if e.complexity.Product.Title == nil {
			break
		}

		return e.complexity.Product.Title(childComplexity), true

	case "Product.Type":
		if e.complexity.Product.Type == nil {
			break
		}

		return e.complexity.Product.Type(childComplexity), true

	case "Product.Verified":
		if e.complexity.Product.Verified == nil {
			break
		}

		return e.complexity.Product.Verified(childComplexity), true

	case "Product.VerifiedBy":
		if e.complexity.Product.VerifiedBy == nil {
			break
		}

		return e.complexity.Product.VerifiedBy(childComplexity), true

	case "ProductCertification.certification":
		if e.complexity.ProductCertification.Certification == nil {
			break
		}

		return e.complexity.ProductCertification.Certification(childComplexity), true

	case "ProductCertification.certifiedAt":
		if e.complexity.ProductCertification.CertifiedAt == nil {
			break
		}

		return e.complexity.ProductCertification.CertifiedAt(childComplexity), true

	case "ProductCertification.expirationDate":
		if e.complexity.ProductCertification.ExpirationDate == nil {
			break
		}

		return e.complexity.ProductCertification.ExpirationDate(childComplexity), true

	case "ProductCertification.otherDetails":
		if e.complexity.ProductCertification.OtherDetails == nil {
			break
		}

		return e.complexity.ProductCertification.OtherDetails(childComplexity), true

	case "ProductCertification.product":
		if e.complexity.ProductCertification.Product == nil {
			break
		}

		return e.complexity.ProductCertification.Product(childComplexity), true

	case "PurchaseInfo.Company":
		if e.complexity.PurchaseInfo.Company == nil {
			break
		}

		return e.complexity.PurchaseInfo.Company(childComplexity), true

	case "PurchaseInfo.Link":
		if e.complexity.PurchaseInfo.Link == nil {
			break
		}

		return e.complexity.PurchaseInfo.Link(childComplexity), true

	case "PurchaseInfo.Price":
		if e.complexity.PurchaseInfo.Price == nil {
			break
		}

		return e.complexity.PurchaseInfo.Price(childComplexity), true

	case "PurchaseInfo.Rating":
		if e.complexity.PurchaseInfo.Rating == nil {
			break
		}

		return e.complexity.PurchaseInfo.Rating(childComplexity), true

	case "Query.BaseQuery":
		if e.complexity.Query.BaseQuery == nil {
			break
		}

		return e.complexity.Query.BaseQuery(childComplexity), true

	case "Query.getAllCategories":
		if e.complexity.Query.GetAllCategories == nil {
			break
		}

		return e.complexity.Query.GetAllCategories(childComplexity), true

	case "Query.getAllCertifications":
		if e.complexity.Query.GetAllCertifications == nil {
			break
		}

		return e.complexity.Query.GetAllCertifications(childComplexity), true

	case "Query.getAllCompanies":
		if e.complexity.Query.GetAllCompanies == nil {
			break
		}

		return e.complexity.Query.GetAllCompanies(childComplexity), true

	case "Query.getAllProducts":
		if e.complexity.Query.GetAllProducts == nil {
			break
		}

		return e.complexity.Query.GetAllProducts(childComplexity), true

	case "Query.getCertificationById":
		if e.complexity.Query.GetCertificationByID == nil {
			break
		}

		args, err := ec.field_Query_getCertificationById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCertificationByID(childComplexity, args["id"].(string)), true

	case "Query.getCertificationsByFilter":
		if e.complexity.Query.GetCertificationsByFilter == nil {
			break
		}

		args, err := ec.field_Query_getCertificationsByFilter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCertificationsByFilter(childComplexity, args["input"].(model.FilterCertificationsInput)), true

	case "Query.getCompaniesByFilter":
		if e.complexity.Query.GetCompaniesByFilter == nil {
			break
		}

		args, err := ec.field_Query_getCompaniesByFilter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompaniesByFilter(childComplexity, args["filter"].(*model.FilterCompanyInput)), true

	case "Query.getCompany":
		if e.complexity.Query.GetCompany == nil {
			break
		}

		args, err := ec.field_Query_getCompany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCompany(childComplexity, args["id"].(string)), true

	case "Query.getProductByID":
		if e.complexity.Query.GetProductByID == nil {
			break
		}

		args, err := ec.field_Query_getProductByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProductByID(childComplexity, args["id"].(string)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["_id"].(string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		return e.complexity.Query.Users(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User._id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.password":
		if e.complexity.User.Password == nil {
			break
		}

		return e.complexity.User.Password(childComplexity), true

	case "User.phone":
		if e.complexity.User.Phone == nil {
			break
		}

		return e.complexity.User.Phone(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAddCategory,
		ec.unmarshalInputAddCertification,
		ec.unmarshalInputAddCompany,
		ec.unmarshalInputAddImage,
		ec.unmarshalInputAddProductRequest,
		ec.unmarshalInputAddUserFav,
		ec.unmarshalInputCategorizationInput,
		ec.unmarshalInputCertificationFiltersInput,
		ec.unmarshalInputCompanyCertificationInput,
		ec.unmarshalInputCompanyFiltersInput,
		ec.unmarshalInputCompanyProductInput,
		ec.unmarshalInputFilterCertificationsInput,
		ec.unmarshalInputFilterCompanyInput,
		ec.unmarshalInputLoginUser,
		ec.unmarshalInputNewUser,
		ec.unmarshalInputPaginationInput,
		ec.unmarshalInputProductCertificationInput,
		ec.unmarshalInputPurchaseInfoInput,
		ec.unmarshalInputRemoveUserFav,
		ec.unmarshalInputSortByInput,
		ec.unmarshalInputToggleUserFav,
		ec.unmarshalInputUpdateCertification,
		ec.unmarshalInputUpdateCompany,
		ec.unmarshalInputUpdateImage,
		ec.unmarshalInputUpdateProductRequest,
		ec.unmarshalInputUpdateUser,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../certification.graphqls", Input: `extend type Mutation {
    addCertification(input: AddCertification!): Certification!
    updateCertification(input: UpdateCertification!): Certification!
}

extend type Query {
    getAllCertifications: [Certification]!
    getCertificationById(id: String!): Certification
    getCertificationsByFilter(input: FilterCertificationsInput!): PaginatedCertifications!
}

type PaginatedCertifications {
    Certifications: [Certification]
    TotalItems: String!
    ItemsPerPage: String
    CurrentPage: String
    Description: String
    TotalPages: String
}
 
input UpdateCertification {
    ID: String!
    Name: String
    Logo: String
    Website: String
    Description: String
    CertifiesCompany: Boolean
    CertifiesProduct: Boolean
    CertifiesProcess: Boolean
    CertifierContactID: String
    Industry: String
    Certifier: String
    Audited: Boolean
    Auditor: String
    Region: String
    Qualifiers: String
    Sources: String
}

input AddCertification {
    Name: String
    Logo: String
    Website: String
    Description: String
    CertifiesCompany: Boolean
    CertifiesProduct: Boolean
    CertifiesProcess: Boolean
    CertifierContactID: String
    Industry: String
    Certifier: String
    Audited: Boolean
    Auditor: String
    Region: String
    Qualifiers: String
    Sources: String
}

input CertificationFiltersInput {
    Name: String
    Website: String
    Logo: String
    Description: String
    Industry: String
    Certifier: String
    CertifiesCompany: Boolean
    CertifiesProduct: Boolean
    CertifiesProcess: Boolean
    CertifierContactID: String
    Audited: Boolean
    Auditor: String
    Region: String
    Qualifiers: String
    Sources: String
}

type Certification {
    _id: String!
    Name: String!
    Logo: String
    Website: String
    Description: String
    CertifiesCompany: Boolean
    CertifiesProduct: Boolean
    CertifiesProcess: Boolean
    CertifierContactID: String
    Industry: String
    Certifier: String
    Audited: Boolean
    Auditor: String
    Region: String
    Qualifiers: String
    Sources: String
    CreatedAt: String
    UpdatedAt: String
}


input FilterCertificationsInput {
    CertificationFilters: CertificationFiltersInput
    SortBy: SortByInput
    Pagination: PaginationInput
}
`, BuiltIn: false},
	{Name: "../company.graphqls", Input: `extend type Mutation {
    addCompany(input: AddCompany!): Company!
    updateCompany(input: UpdateCompany!): Company!
}

extend type Query {
    getCompany(id: String!): Company!
    getAllCompanies: [Company!]
    getCompaniesByFilter(filter: FilterCompanyInput): [Company!]
}

type Company {
    _id: String!
    name: String!
    url: String
    description: String
    city: String
    state: String
    country: String
    user: User
    isVerified: Boolean
    logo: String
    companyCertifications: [Certification!] # Relationship with CompanyCertification
    companyProducts: [Product!] # Relationship with CompanyProduct
}

input AddCompany {
    name: String!
    url: String
    description: String
    city: String
    state: String
    country: String
    isVerified: Boolean
    logo: String
    certifications: [CompanyCertificationInput!] # Input for relational table
    products: [CompanyProductInput!] # Input for relational table
}

input UpdateCompany {
    ID: String!
    name: String
    url: String
    description: String
    city: String
    state: String
    country: String
    isVerified: Boolean
    logo: String
    certifications: [CompanyCertificationInput!] # Input for relational table
    products: [CompanyProductInput!] # Input for relational table
}

input CompanyFiltersInput {
    name: String
    city: String
    state: String
    country: String
    isVerified: Boolean
}

input FilterCompanyInput {
    CompanyFilters: CompanyFiltersInput
    SortBy: SortByInput
    Pagination: PaginationInput
}
`, BuiltIn: false},
	{Name: "../companyCertification.graphqls", Input: `# Relational table to manage company certifications

type CompanyCertification {
    company: Company!
    certification: Certification!
    certifiedAt: String # Date when the certification was granted
    expirationDate: String # Expiration date of the certification if applicable
    otherDetails: String # Any other details specific to the company-certification relationship
}

input CompanyCertificationInput {
    companyID: String!
    certificationID: String!
    certifiedAt: String
    expirationDate: String
    otherDetails: String
}`, BuiltIn: false},
	{Name: "../companyProducts.graphqls", Input: `# Relational table to manage company products
type CompanyProduct {
    company: Company!
    product: Product!
    launchedAt: String # Date when the product was launched by the company
    discontinuedAt: String # Date when the product was discontinued if applicable
    otherDetails: String # Any other details specific to the company-product relationship
}

input CompanyProductInput {
    productID: String!
    launchedAt: String
    discontinuedAt: String
    otherDetails: String
}
`, BuiltIn: false},
	{Name: "../favorite.graphqls", Input: `extend type Mutation {
    toggleUserFav(request: ToggleUserFav!): Favorite
}

input ToggleUserFav {
    userId: String!
    productId: String!
}


type Favorite {
    id: ID!
    user: User!
    product: Product!
}

input AddUserFav {
    userId: String!
    productId: String!
}

input RemoveUserFav {
    userId: String!
    productId: String!
}`, BuiltIn: false},
	{Name: "../helpers.graphqls", Input: `input PaginationInput {
    Items: Int
    Page: Int
}


input SortByInput {
	SortBy: String
	SortOrder: String
}`, BuiltIn: false},
	{Name: "../image.graphqls", Input: `extend type Mutation {
    addImage(request: AddImage!): Image!
	UpdateImage(request: UpdateImage!): Image!
}

type Image {
    id: String!
    productID: String!
    url: String!
}

input AddImage {
    productID: String
    url: String!
}

input UpdateImage {
    id: String!
    productID: String
    url: String!
}`, BuiltIn: false},
	{Name: "../prodCategorization.graphqls", Input: `

extend type Mutation {
    addCategory(input: AddCategory!): Category!
}

extend type Query {
    getAllCategories:[Category]!
}

# ======= INPUTS ======

input AddCategory {
    Name: String!
    ParentID: String
    Type: CategoryEnum!
}

enum CategoryEnum {
    Section, Subsection, Department, Category, SubCategory, Type, SubType
}

# ======= TYPES ======
type Category {
    _id: String!
    ParentID: String
    Type: String
    Name: String!
    Children: [Category]
}


#type Section {
#    _id: String!
#    Title: String!
#    SubSections: [SubSection]
#}
#
#type SubSection {
#    _id: String!
#    Title: String!
#    Departments: [Department]
#}

#type Department {
#    _id: String!
#    Title: String!
#    Categories: [Category]
#}
#
#type SubCategory {
#    _id: String!
#    Title: String!
#    Types: [Type]
#}
#
#type Type {
#    _id: String!
#    Title: String!
#    SubTypes: [SubType]
#}
#
#type SubType {
#    _id: String!
#    Title: String!
#}

#enum FilterType {
#    color, style, shape, material, setting, scent, pattern, chainType, closureType, cutType, gemstone, location,
#    holiday, occasion, size, mount, fillMaterial, height, length
#}

`, BuiltIn: false},
	{Name: "../product.graphqls", Input: `extend type Mutation {
    addProduct(input: AddProductRequest!): Product!
    updateProduct(input: UpdateProductRequest!): Product!
}

extend type Query {
    getProductByID(id: String!): Product!
    getAllProducts: [Product!]
}

input AddProductRequest {
    Title: String!
    Description: String!
    Categorization: CategorizationInput!
    Certifications: [ProductCertificationInput!] # Input for relational table
    PurchaseInfo: PurchaseInfoInput!
    ImageLinks: [String]
    CompanyID: String! # Reference to the Company ID
}

input UpdateProductRequest {
    ID: String!
    Title: String
    Description: String
    Categorization: CategorizationInput
    Certifications: [ProductCertificationInput!] # Input for relational table
    PurchaseInfo: PurchaseInfoInput
    ImageLinks: [String]
    CompanyID: String
}

type Product {
    _id: String!
    Title: String!
    Description: String!
    productCertifications: [ProductCertification!] # Relationship with ProductCertification
    company: Company! # Reference to the Company
    MaterialsAndIngredients: [String]
    GiveBackPrograms: [String]
    OwnersAndFounders: [String]
    Section: String
    Subsection: String
    Department: [String]
    Category: String
    SubCategory: String
    Type: String
    Style: String
    ImageLinks: [String]
    PurchaseInfo: [PurchaseInfo]
    Verified: Boolean
    VerifiedBy: [String]
}

input PurchaseInfoInput {
    Price: String!
    Link: String!
    Rating: String
    Company: String
    IfOtherCompany: String
}

input CategorizationInput {
    Section: String
    SubSection: String
    Department: String
    Category: String
    SubCategory: String
    Type: String
    Style: String
}

type PurchaseInfo {
    Price: String
    Link: String
    Company: String
    Rating: String
}
`, BuiltIn: false},
	{Name: "../productCertification.graphqls", Input: `# Relational table to manage product certifications
extend type Mutation {
    addProductCertification(input: ProductCertificationInput!): ProductCertification!
}


type ProductCertification {
    product: Product!
    certification: Certification!
    certifiedAt: String # Date when the certification was granted
    expirationDate: String # Expiration date of the certification if applicable
    otherDetails: String # Any other details specific to the product-certification relationship
}

input ProductCertificationInput {
    certificationID: String
    certifiedAt: String
    expirationDate: String
    otherDetails: String
}
`, BuiltIn: false},
	{Name: "../schema.graphqls", Input: `
schema {
  query: Query
  mutation: Mutation
}
type Query {
  BaseQuery: Any
}

type Mutation {
  BaseMutation: Any
}


scalar Any`, BuiltIn: false},
	{Name: "../user.graphqls", Input: `extend type Query {
    user(_id: String!): User!
    users: [User]!
}

extend type Mutation {
    addUser(input: NewUser!): User!
    updateUser(input: UpdateUser!): User!
    login(input: LoginUser!): LoginResponse!
}

type User {
    _id: String!
    email: String!
    phone: String
    password: String
}

input NewUser {
    email: String!
    phone: String
    password: String!
}

input UpdateUser {
    userId: String!
    email: String
    phone: String
    password: String
}

input LoginUser {
    email: String!
    password: String!
}

type LoginResponse {
    token: String!
    user: User!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
