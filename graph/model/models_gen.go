// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AddCategory struct {
	Name     string       `json:"Name"`
	ParentID *string      `json:"ParentID,omitempty"`
	Type     CategoryEnum `json:"Type"`
}

type AddCertification struct {
	Name               *string `json:"Name,omitempty"`
	Logo               *string `json:"Logo,omitempty"`
	Website            *string `json:"Website,omitempty"`
	Description        *string `json:"Description,omitempty"`
	CertifiesCompany   *bool   `json:"CertifiesCompany,omitempty"`
	CertifiesProduct   *bool   `json:"CertifiesProduct,omitempty"`
	CertifiesProcess   *bool   `json:"CertifiesProcess,omitempty"`
	CertifierContactID *string `json:"CertifierContactID,omitempty"`
	Industry           *string `json:"Industry,omitempty"`
	Certifier          *string `json:"Certifier,omitempty"`
	Audited            *bool   `json:"Audited,omitempty"`
	Auditor            *string `json:"Auditor,omitempty"`
	Region             *string `json:"Region,omitempty"`
	Qualifiers         *string `json:"Qualifiers,omitempty"`
	Sources            *string `json:"Sources,omitempty"`
}

type AddCompany struct {
	Name           *string             `json:"name,omitempty"`
	URL            *string             `json:"url,omitempty"`
	Description    *string             `json:"description,omitempty"`
	City           *string             `json:"city,omitempty"`
	State          *string             `json:"state,omitempty"`
	Country        *string             `json:"country,omitempty"`
	IsVerified     *bool               `json:"isVerified,omitempty"`
	Logo           *string             `json:"logo,omitempty"`
	Certifications []*AddCertification `json:"certifications,omitempty"`
}

type AddProductRequest struct {
	Title          string               `json:"Title"`
	Description    string               `json:"Description"`
	Categorization *CategorizationInput `json:"Categorization"`
	Certifications []*int               `json:"Certifications,omitempty"`
	PurchaseInfo   *PurchaseInfoInput   `json:"PurchaseInfo"`
	ImageLinks     []*string            `json:"ImageLinks,omitempty"`
}

type AddUserFav struct {
	UserID    string `json:"userId"`
	ProductID string `json:"productId"`
}

type CategorizationInput struct {
	Section     *string `json:"Section,omitempty"`
	SubSection  *string `json:"SubSection,omitempty"`
	Department  *string `json:"Department,omitempty"`
	Category    *string `json:"Category,omitempty"`
	SubCategory *string `json:"SubCategory,omitempty"`
	Type        *string `json:"Type,omitempty"`
	Style       *string `json:"Style,omitempty"`
}

type Category struct {
	ID       string      `json:"_id"`
	ParentID *string     `json:"ParentID,omitempty"`
	Type     *string     `json:"Type,omitempty"`
	Name     string      `json:"Name"`
	Children []*Category `json:"Children,omitempty"`
}

type Certification struct {
	ID                 string  `json:"_id"`
	Name               string  `json:"Name"`
	Logo               *string `json:"Logo,omitempty"`
	Website            *string `json:"Website,omitempty"`
	Description        *string `json:"Description,omitempty"`
	CertifiesCompany   *bool   `json:"CertifiesCompany,omitempty"`
	CertifiesProduct   *bool   `json:"CertifiesProduct,omitempty"`
	CertifiesProcess   *bool   `json:"CertifiesProcess,omitempty"`
	CertifierContactID *string `json:"CertifierContactID,omitempty"`
	Industry           *string `json:"Industry,omitempty"`
	Certifier          *string `json:"Certifier,omitempty"`
	Audited            *bool   `json:"Audited,omitempty"`
	Auditor            *string `json:"Auditor,omitempty"`
	Region             *string `json:"Region,omitempty"`
	Qualifiers         *string `json:"Qualifiers,omitempty"`
	Sources            *string `json:"Sources,omitempty"`
	CreatedAt          *string `json:"CreatedAt,omitempty"`
	UpdatedAt          *string `json:"UpdatedAt,omitempty"`
}

type Company struct {
	ID          *string `json:"_id,omitempty"`
	Name        *string `json:"name,omitempty"`
	URL         *string `json:"url,omitempty"`
	Description *string `json:"description,omitempty"`
	City        *string `json:"city,omitempty"`
	State       *string `json:"state,omitempty"`
	Country     *string `json:"country,omitempty"`
	User        *User   `json:"user,omitempty"`
	IsVerified  *bool   `json:"isVerified,omitempty"`
	Logo        *string `json:"logo,omitempty"`
}

type Favourite struct {
	ID      string   `json:"id"`
	User    *User    `json:"user"`
	Product *Product `json:"product"`
}

type Image struct {
	ID       string `json:"_id"`
	Location string `json:"Location"`
}

type Mutation struct {
}

type NewUser struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
	Password  string `json:"password"`
}

type Product struct {
	ID                      string          `json:"_id"`
	Title                   string          `json:"Title"`
	Description             string          `json:"Description"`
	Certification           *Certification  `json:"Certification"`
	ProductCertifications   []*string       `json:"ProductCertifications,omitempty"`
	CompanyCertifications   []*string       `json:"CompanyCertifications,omitempty"`
	MaterialsAndIngredients []*string       `json:"MaterialsAndIngredients,omitempty"`
	GiveBackPrograms        []*string       `json:"GiveBackPrograms,omitempty"`
	OwnersAndFounders       []*string       `json:"OwnersAndFounders,omitempty"`
	Section                 *string         `json:"Section,omitempty"`
	Subsection              *string         `json:"Subsection,omitempty"`
	Department              []*string       `json:"Department,omitempty"`
	Category                *string         `json:"Category,omitempty"`
	SubCategory             *string         `json:"SubCategory,omitempty"`
	Type                    *string         `json:"Type,omitempty"`
	Style                   *string         `json:"Style,omitempty"`
	ImageLinks              []*string       `json:"ImageLinks,omitempty"`
	PurchaseInfo            []*PurchaseInfo `json:"PurchaseInfo,omitempty"`
	Verified                *bool           `json:"Verified,omitempty"`
	VerifiedBy              []*string       `json:"VerifiedBy,omitempty"`
}

type PurchaseInfo struct {
	Price   *string `json:"Price,omitempty"`
	Link    *string `json:"Link,omitempty"`
	Company *string `json:"Company,omitempty"`
	Rating  *string `json:"Rating,omitempty"`
}

type PurchaseInfoInput struct {
	Price          string  `json:"Price"`
	Link           string  `json:"Link"`
	Rating         *string `json:"Rating,omitempty"`
	Company        *string `json:"Company,omitempty"`
	IfOtherCompany *string `json:"IfOtherCompany,omitempty"`
}

type Query struct {
}

type UpdateCertification struct {
	ID                 string  `json:"ID"`
	Name               *string `json:"Name,omitempty"`
	Logo               *string `json:"Logo,omitempty"`
	Website            *string `json:"Website,omitempty"`
	Description        *string `json:"Description,omitempty"`
	CertifiesCompany   *bool   `json:"CertifiesCompany,omitempty"`
	CertifiesProduct   *bool   `json:"CertifiesProduct,omitempty"`
	CertifiesProcess   *bool   `json:"CertifiesProcess,omitempty"`
	CertifierContactID *string `json:"CertifierContactID,omitempty"`
	Industry           *string `json:"Industry,omitempty"`
	Certifier          *string `json:"Certifier,omitempty"`
	Audited            *bool   `json:"Audited,omitempty"`
	Auditor            *string `json:"Auditor,omitempty"`
	Region             *string `json:"Region,omitempty"`
	Qualifiers         *string `json:"Qualifiers,omitempty"`
	Sources            *string `json:"Sources,omitempty"`
}

type UpdateUser struct {
	UserID    string  `json:"userId"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Email     *string `json:"email,omitempty"`
	Password  *string `json:"password,omitempty"`
}

type User struct {
	ID        string `json:"_id"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
	Email     string `json:"email"`
}

type CategoryEnum string

const (
	CategoryEnumSection     CategoryEnum = "Section"
	CategoryEnumSubsection  CategoryEnum = "Subsection"
	CategoryEnumDepartment  CategoryEnum = "Department"
	CategoryEnumCategory    CategoryEnum = "Category"
	CategoryEnumSubCategory CategoryEnum = "SubCategory"
	CategoryEnumType        CategoryEnum = "Type"
	CategoryEnumSubType     CategoryEnum = "SubType"
)

var AllCategoryEnum = []CategoryEnum{
	CategoryEnumSection,
	CategoryEnumSubsection,
	CategoryEnumDepartment,
	CategoryEnumCategory,
	CategoryEnumSubCategory,
	CategoryEnumType,
	CategoryEnumSubType,
}

func (e CategoryEnum) IsValid() bool {
	switch e {
	case CategoryEnumSection, CategoryEnumSubsection, CategoryEnumDepartment, CategoryEnumCategory, CategoryEnumSubCategory, CategoryEnumType, CategoryEnumSubType:
		return true
	}
	return false
}

func (e CategoryEnum) String() string {
	return string(e)
}

func (e *CategoryEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CategoryEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CategoryEnum", str)
	}
	return nil
}

func (e CategoryEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
