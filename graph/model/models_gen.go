// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AddCategory struct {
	Name     string       `json:"Name"`
	ParentID *string      `json:"ParentID,omitempty"`
	Type     CategoryEnum `json:"Type"`
}

type AddCertification struct {
	Name               *string `json:"Name,omitempty"`
	Logo               *string `json:"Logo,omitempty"`
	Website            *string `json:"Website,omitempty"`
	Description        *string `json:"Description,omitempty"`
	CertifiesCompany   *bool   `json:"CertifiesCompany,omitempty"`
	CertifiesProduct   *bool   `json:"CertifiesProduct,omitempty"`
	CertifiesProcess   *bool   `json:"CertifiesProcess,omitempty"`
	CertifierContactID *string `json:"CertifierContactID,omitempty"`
	Industry           *string `json:"Industry,omitempty"`
	Certifier          *string `json:"Certifier,omitempty"`
	Audited            *bool   `json:"Audited,omitempty"`
	Auditor            *string `json:"Auditor,omitempty"`
	Region             *string `json:"Region,omitempty"`
	Qualifiers         *string `json:"Qualifiers,omitempty"`
	Sources            *string `json:"Sources,omitempty"`
}

type AddCompany struct {
	Name           string                       `json:"name"`
	URL            *string                      `json:"url,omitempty"`
	Description    *string                      `json:"description,omitempty"`
	City           *string                      `json:"city,omitempty"`
	State          *string                      `json:"state,omitempty"`
	Country        *string                      `json:"country,omitempty"`
	IsVerified     *bool                        `json:"isVerified,omitempty"`
	Logo           *string                      `json:"logo,omitempty"`
	Certifications []*CompanyCertificationInput `json:"certifications,omitempty"`
	Products       []*CompanyProductInput       `json:"products,omitempty"`
}

type AddImage struct {
	ProductID *string `json:"productID,omitempty"`
	URL       string  `json:"url"`
}

type AddProductRequest struct {
	Title          string                       `json:"Title"`
	Description    string                       `json:"Description"`
	Department     string                       `json:"Department"`
	Certifications []*ProductCertificationInput `json:"Certifications,omitempty"`
	PurchaseInfo   *PurchaseInfoInput           `json:"PurchaseInfo"`
	ImageLinks     []*string                    `json:"ImageLinks,omitempty"`
	CompanyID      string                       `json:"CompanyID"`
}

type AddUserFav struct {
	UserID    string `json:"userId"`
	ProductID string `json:"productId"`
}

type Category struct {
	ID       string      `json:"_id"`
	ParentID *string     `json:"ParentID,omitempty"`
	Type     *string     `json:"Type,omitempty"`
	Name     string      `json:"Name"`
	Children []*Category `json:"Children,omitempty"`
}

type Certification struct {
	ID                 string  `json:"_id"`
	Name               string  `json:"Name"`
	Logo               *string `json:"Logo,omitempty"`
	Website            *string `json:"Website,omitempty"`
	Description        *string `json:"Description,omitempty"`
	CertifiesCompany   *bool   `json:"CertifiesCompany,omitempty"`
	CertifiesProduct   *bool   `json:"CertifiesProduct,omitempty"`
	CertifiesProcess   *bool   `json:"CertifiesProcess,omitempty"`
	CertifierContactID *string `json:"CertifierContactID,omitempty"`
	Industry           *string `json:"Industry,omitempty"`
	Certifier          *string `json:"Certifier,omitempty"`
	Audited            *bool   `json:"Audited,omitempty"`
	Auditor            *string `json:"Auditor,omitempty"`
	Region             *string `json:"Region,omitempty"`
	Qualifiers         *string `json:"Qualifiers,omitempty"`
	Sources            *string `json:"Sources,omitempty"`
	CreatedAt          *string `json:"CreatedAt,omitempty"`
	UpdatedAt          *string `json:"UpdatedAt,omitempty"`
}

type CertificationFiltersInput struct {
	Name               *string `json:"Name,omitempty"`
	Website            *string `json:"Website,omitempty"`
	Logo               *string `json:"Logo,omitempty"`
	Description        *string `json:"Description,omitempty"`
	Industry           *string `json:"Industry,omitempty"`
	Certifier          *string `json:"Certifier,omitempty"`
	CertifiesCompany   *bool   `json:"CertifiesCompany,omitempty"`
	CertifiesProduct   *bool   `json:"CertifiesProduct,omitempty"`
	CertifiesProcess   *bool   `json:"CertifiesProcess,omitempty"`
	CertifierContactID *string `json:"CertifierContactID,omitempty"`
	Audited            *bool   `json:"Audited,omitempty"`
	Auditor            *string `json:"Auditor,omitempty"`
	Region             *string `json:"Region,omitempty"`
	Qualifiers         *string `json:"Qualifiers,omitempty"`
	Sources            *string `json:"Sources,omitempty"`
}

type Company struct {
	ID                    string           `json:"_id"`
	Name                  string           `json:"name"`
	URL                   *string          `json:"url,omitempty"`
	Description           *string          `json:"description,omitempty"`
	City                  *string          `json:"city,omitempty"`
	State                 *string          `json:"state,omitempty"`
	Country               *string          `json:"country,omitempty"`
	User                  *User            `json:"user,omitempty"`
	IsVerified            *bool            `json:"isVerified,omitempty"`
	Logo                  *string          `json:"logo,omitempty"`
	CompanyCertifications []*Certification `json:"companyCertifications,omitempty"`
	CompanyProducts       []*Product       `json:"companyProducts,omitempty"`
}

type CompanyCertification struct {
	Company        *Company       `json:"company"`
	Certification  *Certification `json:"certification"`
	CertifiedAt    *string        `json:"certifiedAt,omitempty"`
	ExpirationDate *string        `json:"expirationDate,omitempty"`
	OtherDetails   *string        `json:"otherDetails,omitempty"`
}

type CompanyCertificationInput struct {
	CompanyID       string  `json:"companyID"`
	CertificationID string  `json:"certificationID"`
	CertifiedAt     *string `json:"certifiedAt,omitempty"`
	ExpirationDate  *string `json:"expirationDate,omitempty"`
	OtherDetails    *string `json:"otherDetails,omitempty"`
}

type CompanyFiltersInput struct {
	Name       *string `json:"name,omitempty"`
	City       *string `json:"city,omitempty"`
	State      *string `json:"state,omitempty"`
	Country    *string `json:"country,omitempty"`
	IsVerified *bool   `json:"isVerified,omitempty"`
}

type CompanyProduct struct {
	Company        *Company `json:"company"`
	Product        *Product `json:"product"`
	LaunchedAt     *string  `json:"launchedAt,omitempty"`
	DiscontinuedAt *string  `json:"discontinuedAt,omitempty"`
	OtherDetails   *string  `json:"otherDetails,omitempty"`
}

type CompanyProductInput struct {
	ProductID      string  `json:"productID"`
	LaunchedAt     *string `json:"launchedAt,omitempty"`
	DiscontinuedAt *string `json:"discontinuedAt,omitempty"`
	OtherDetails   *string `json:"otherDetails,omitempty"`
}

type Favorite struct {
	ID      string   `json:"id"`
	User    *User    `json:"user"`
	Product *Product `json:"product"`
}

type FilterCertificationsInput struct {
	CertificationFilters *CertificationFiltersInput `json:"CertificationFilters,omitempty"`
	SortBy               *SortByInput               `json:"SortBy,omitempty"`
	Pagination           *PaginationInput           `json:"Pagination,omitempty"`
}

type FilterCompanyInput struct {
	CompanyFilters *CompanyFiltersInput `json:"CompanyFilters,omitempty"`
	SortBy         *SortByInput         `json:"SortBy,omitempty"`
	Pagination     *PaginationInput     `json:"Pagination,omitempty"`
}

type Filters struct {
	Price                 *PriceRange `json:"Price,omitempty"`
	Rating                *int        `json:"Rating,omitempty"`
	Companies             []*string   `json:"Companies,omitempty"`
	CompanyCertifications []*string   `json:"CompanyCertifications,omitempty"`
	ProductCertifications []*string   `json:"ProductCertifications,omitempty"`
}

type Image struct {
	ID        string `json:"id"`
	ProductID string `json:"productID"`
	URL       string `json:"url"`
}

type LoginResponse struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type LoginUser struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mutation struct {
}

type NewUser struct {
	Email    string  `json:"email"`
	Phone    *string `json:"phone,omitempty"`
	Password string  `json:"password"`
}

type PaginatedCertifications struct {
	Certifications []*Certification `json:"Certifications,omitempty"`
	TotalItems     string           `json:"TotalItems"`
	ItemsPerPage   *string          `json:"ItemsPerPage,omitempty"`
	CurrentPage    *string          `json:"CurrentPage,omitempty"`
	Description    *string          `json:"Description,omitempty"`
	TotalPages     *string          `json:"TotalPages,omitempty"`
}

type PaginationInput struct {
	Items *int `json:"Items,omitempty"`
	Page  *int `json:"Page,omitempty"`
}

type PriceRange struct {
	Min *float64 `json:"min,omitempty"`
	Max *float64 `json:"max,omitempty"`
}

type PriceRangeInput struct {
	Min *float64 `json:"min,omitempty"`
	Max *float64 `json:"max,omitempty"`
}

type Product struct {
	ID                      string           `json:"_id"`
	Title                   string           `json:"Title"`
	Description             string           `json:"Description"`
	ImageLinks              []string         `json:"ImageLinks,omitempty"`
	Company                 *Company         `json:"Company"`
	PurchaseInfo            []*PurchaseInfo  `json:"PurchaseInfo,omitempty"`
	ProductCertifications   []*Certification `json:"ProductCertifications,omitempty"`
	Department              string           `json:"Department"`
	SubDepartment           string           `json:"subDepartment"`
	MaterialsAndIngredients []*string        `json:"MaterialsAndIngredients,omitempty"`
	GiveBackPrograms        []*string        `json:"GiveBackPrograms,omitempty"`
	OwnersAndFounders       []*string        `json:"OwnersAndFounders,omitempty"`
	Section                 *string          `json:"Section,omitempty"`
	Subsection              *string          `json:"Subsection,omitempty"`
	Category                *string          `json:"Category,omitempty"`
	SubCategory             *string          `json:"SubCategory,omitempty"`
	Type                    *string          `json:"Type,omitempty"`
	Style                   *string          `json:"Style,omitempty"`
	Verified                *bool            `json:"Verified,omitempty"`
	VerifiedBy              []*string        `json:"VerifiedBy,omitempty"`
}

type ProductCertification struct {
	Product        *Product       `json:"product"`
	Certification  *Certification `json:"certification"`
	CertifiedAt    *string        `json:"certifiedAt,omitempty"`
	ExpirationDate *string        `json:"expirationDate,omitempty"`
	OtherDetails   *string        `json:"otherDetails,omitempty"`
}

type ProductCertificationInput struct {
	CertificationID *string `json:"certificationID,omitempty"`
	CertifiedAt     *string `json:"certifiedAt,omitempty"`
	ExpirationDate  *string `json:"expirationDate,omitempty"`
	OtherDetails    *string `json:"otherDetails,omitempty"`
}

type ProductFilterInput struct {
	PriceRange            *PriceRangeInput `json:"priceRange,omitempty"`
	CompanyCertifications []*string        `json:"companyCertifications,omitempty"`
	ProductCertifications []*string        `json:"productCertifications,omitempty"`
	Companies             []*string        `json:"companies,omitempty"`
}

type PurchaseInfo struct {
	Price   *string `json:"Price,omitempty"`
	Link    *string `json:"Link,omitempty"`
	Company *string `json:"Company,omitempty"`
	Rating  *string `json:"Rating,omitempty"`
}

type PurchaseInfoInput struct {
	Price          string  `json:"Price"`
	Link           string  `json:"Link"`
	Rating         *string `json:"Rating,omitempty"`
	Company        *string `json:"Company,omitempty"`
	IfOtherCompany *string `json:"IfOtherCompany,omitempty"`
}

type Query struct {
}

type RemoveUserFav struct {
	UserID    string `json:"userId"`
	ProductID string `json:"productId"`
}

type SortByInput struct {
	SortBy    *string `json:"SortBy,omitempty"`
	SortOrder *string `json:"SortOrder,omitempty"`
}

type ToggleUserFav struct {
	UserID            string `json:"userId"`
	ProductID         string `json:"productId"`
	ProductDepartment string `json:"ProductDepartment"`
}

type UpdateCertification struct {
	ID                 string  `json:"ID"`
	Name               *string `json:"Name,omitempty"`
	Logo               *string `json:"Logo,omitempty"`
	Website            *string `json:"Website,omitempty"`
	Description        *string `json:"Description,omitempty"`
	CertifiesCompany   *bool   `json:"CertifiesCompany,omitempty"`
	CertifiesProduct   *bool   `json:"CertifiesProduct,omitempty"`
	CertifiesProcess   *bool   `json:"CertifiesProcess,omitempty"`
	CertifierContactID *string `json:"CertifierContactID,omitempty"`
	Industry           *string `json:"Industry,omitempty"`
	Certifier          *string `json:"Certifier,omitempty"`
	Audited            *bool   `json:"Audited,omitempty"`
	Auditor            *string `json:"Auditor,omitempty"`
	Region             *string `json:"Region,omitempty"`
	Qualifiers         *string `json:"Qualifiers,omitempty"`
	Sources            *string `json:"Sources,omitempty"`
}

type UpdateCompany struct {
	ID             string                       `json:"ID"`
	Name           *string                      `json:"name,omitempty"`
	URL            *string                      `json:"url,omitempty"`
	Description    *string                      `json:"description,omitempty"`
	City           *string                      `json:"city,omitempty"`
	State          *string                      `json:"state,omitempty"`
	Country        *string                      `json:"country,omitempty"`
	IsVerified     *bool                        `json:"isVerified,omitempty"`
	Logo           *string                      `json:"logo,omitempty"`
	Certifications []*CompanyCertificationInput `json:"certifications,omitempty"`
	Products       []*CompanyProductInput       `json:"products,omitempty"`
}

type UpdateImage struct {
	ID        string  `json:"id"`
	ProductID *string `json:"productID,omitempty"`
	URL       string  `json:"url"`
}

type UpdateProductRequest struct {
	ID             string                       `json:"ID"`
	Title          *string                      `json:"Title,omitempty"`
	Description    *string                      `json:"Description,omitempty"`
	Department     *string                      `json:"Department,omitempty"`
	Certifications []*ProductCertificationInput `json:"Certifications,omitempty"`
	PurchaseInfo   *PurchaseInfoInput           `json:"PurchaseInfo,omitempty"`
	ImageLinks     []*string                    `json:"ImageLinks,omitempty"`
	CompanyID      *string                      `json:"CompanyID,omitempty"`
}

type UpdateUser struct {
	UserID   string  `json:"userId"`
	Email    *string `json:"email,omitempty"`
	Phone    *string `json:"phone,omitempty"`
	Password *string `json:"password,omitempty"`
}

type User struct {
	ID       string  `json:"_id"`
	Email    string  `json:"email"`
	Phone    *string `json:"phone,omitempty"`
	Password *string `json:"password,omitempty"`
}

type CategoryEnum string

const (
	CategoryEnumSection     CategoryEnum = "Section"
	CategoryEnumSubsection  CategoryEnum = "Subsection"
	CategoryEnumDepartment  CategoryEnum = "Department"
	CategoryEnumCategory    CategoryEnum = "Category"
	CategoryEnumSubCategory CategoryEnum = "SubCategory"
	CategoryEnumType        CategoryEnum = "Type"
	CategoryEnumSubType     CategoryEnum = "SubType"
)

var AllCategoryEnum = []CategoryEnum{
	CategoryEnumSection,
	CategoryEnumSubsection,
	CategoryEnumDepartment,
	CategoryEnumCategory,
	CategoryEnumSubCategory,
	CategoryEnumType,
	CategoryEnumSubType,
}

func (e CategoryEnum) IsValid() bool {
	switch e {
	case CategoryEnumSection, CategoryEnumSubsection, CategoryEnumDepartment, CategoryEnumCategory, CategoryEnumSubCategory, CategoryEnumType, CategoryEnumSubType:
		return true
	}
	return false
}

func (e CategoryEnum) String() string {
	return string(e)
}

func (e *CategoryEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CategoryEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CategoryEnum", str)
	}
	return nil
}

func (e CategoryEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Department string

const (
	DepartmentHomeGarden          Department = "HomeGarden"
	DepartmentClothingAccessories Department = "ClothingAccessories"
	DepartmentHealthBathBeauty    Department = "HealthBathBeauty"
	DepartmentToysKidsBabies      Department = "ToysKidsBabies"
)

var AllDepartment = []Department{
	DepartmentHomeGarden,
	DepartmentClothingAccessories,
	DepartmentHealthBathBeauty,
	DepartmentToysKidsBabies,
}

func (e Department) IsValid() bool {
	switch e {
	case DepartmentHomeGarden, DepartmentClothingAccessories, DepartmentHealthBathBeauty, DepartmentToysKidsBabies:
		return true
	}
	return false
}

func (e Department) String() string {
	return string(e)
}

func (e *Department) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Department(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Department", str)
	}
	return nil
}

func (e Department) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
