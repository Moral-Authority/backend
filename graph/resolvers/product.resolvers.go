package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/Moral-Authority/backend/database"
	"github.com/Moral-Authority/backend/graph/model"
	"github.com/Moral-Authority/backend/handlers"
)

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, input model.UpdateProductRequest) (*model.Product, error) {
	company, err := handlers.ProductService{}.UpdateProductHandler(input, database.ProductDbServiceImpl{}, database.ImageDbServiceImpl{}, database.CertificationDbServiceImpl{})
	if err != nil {
		return nil, err
	}
	return company, nil
}

// GetProductByID is the resolver for the getProductByID field.
func (r *queryResolver) GetProductByID(ctx context.Context, id string, department string) (*model.Product, error) {
	dbService := database.ProductDbServiceImpl{}

	productDept, isDepartment := handlers.IsStringValidProductDepartment(department)
	if !isDepartment {
		return nil, fmt.Errorf("invalid department type: %s", department)
	}

	product, err := handlers.ProductService{}.GetProductByIDHandler(id, productDept.ToInt(), dbService)
	if err != nil {
		return nil, err
	}

	return product, nil
}

// GetAllProducts is the resolver for the getAllProducts field.
func (r *queryResolver) GetAllProductsByDepartment(ctx context.Context, department string) ([]*model.Product, error) {
	dbService := database.ProductDbServiceImpl{}

	productDept, isDepartment := handlers.IsStringValidProductDepartment(department)
	if !isDepartment {
		return nil, fmt.Errorf("invalid department type: %s", department)
	}

	companies, err := handlers.ProductService{}.GetAllProductsHandler(dbService, productDept.ToInt())
	if err != nil {
		return nil, err
	}
	return companies, nil
}
