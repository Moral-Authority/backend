package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/Moral-Authority/backend/database"
	"github.com/Moral-Authority/backend/graph/model"
	"github.com/Moral-Authority/backend/handlers"
)

// AddProduct is the resolver for the addProduct field.
func (r *mutationResolver) AddProduct(ctx context.Context, input model.AddProductRequest) (*model.Product, error) {
	company, err := handlers.ProductService{}.AddNewProduct(input, database.ProductDbServiceImpl{}, database.ImageDbServiceImpl{}, database.CertificationDbServiceImpl{})
	if err != nil {
		return nil, err
	}

	return company, nil
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, input model.UpdateProductRequest) (*model.Product, error) {
	dbService := database.CompanyDbServiceImpl{}
	company, err := handlers.ProductService{}.UpdateProduct(input, dbService, database.ImageDbServiceImpl{})
	if err != nil {
		return nil, err
	}
	return company, nil
}

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, id string) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: GetProduct - getProduct"))
}

// GetAllProducts is the resolver for the getAllProducts field.
func (r *queryResolver) GetAllProducts(ctx context.Context) ([]*model.Product, error) {
	dbService := database.ProductDbServiceImpl{}
	companies, err := handlers.ProductService{}.GetAllProducts(dbService)
	if err != nil {
		return nil, err
	}
	return companies, nil
}


func (r *queryResolver) GetProductByID(ctx context.Context, id string) (*model.Product, error) {
	dbService := database.ProductDbServiceImpl{}
	company, err := handlers.ProductService{}.GetProductByID(id, dbService)
	if err != nil {
		return nil, err
	}
	return company, nil
}
