package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/Moral-Authority/backend/database"
	"github.com/Moral-Authority/backend/graph/model"
	"github.com/Moral-Authority/backend/handlers"
)

// AddCompany is the resolver for the addCompany field.
func (r *mutationResolver) AddCompany(ctx context.Context, input model.AddCompany) (*model.Company, error) {
	company, err := handlers.CompanyService{}.AddCompany(input, database.CompanyDbServiceImpl{}, database.ImageDbServiceImpl{}, database.CertificationDbServiceImpl{})
	if err != nil {
		return nil, err
	}

	return company, nil
}

// UpdateCompany is the resolver for the updateCompany field.
func (r *mutationResolver) UpdateCompany(ctx context.Context, input model.UpdateCompany) (*model.Company, error) {
	dbService := database.CompanyDbServiceImpl{}
	company, err := handlers.CompanyService{}.UpdateCompany(dbService, input)
	if err != nil {
		return nil, err
	}
	return company, nil
}

// GetCompany is the resolver for the getCompany field.
func (r *queryResolver) GetCompany(ctx context.Context, id string) (*model.Company, error) {
	dbService := database.CompanyDbServiceImpl{}
	company, err := handlers.CompanyService{}.GetCompanyById(id, dbService)
	if err != nil {
		return nil, err
	}
	return company, nil
}

// GetAllCompanies is the resolver for the getAllCompanies field.
func (r *queryResolver) GetAllCompanies(ctx context.Context) ([]*model.Company, error) {
	dbService := database.CompanyDbServiceImpl{}
	companies, err := handlers.CompanyService{}.GetAllCompanies(dbService)
	if err != nil {
		return nil, err
	}
	return companies, nil
}

// GetCompaniesByFilter is the resolver for the getCompaniesByFilter field.
func (r *queryResolver) GetCompaniesByFilter(ctx context.Context, filter *model.FilterCompanyInput) ([]*model.Company, error) {
	dbService := database.CompanyDbServiceImpl{}

	filters := map[string]interface{}{
		"name":        filter.Name,
		"city":        filter.City,
		"state":       filter.State,
		"country":     filter.Country,
		"is_verified": filter.IsVerified,
	}

	companies, err := handlers.CompanyService{}.GetCompaniesByFilter(dbService, filters)
	if err != nil {
		return nil, err
	}
	return companies, nil
}
