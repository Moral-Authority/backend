// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	model "github.com/Moral-Authority/backend/graph/model"
	models "github.com/Moral-Authority/backend/models"
	mock "github.com/stretchr/testify/mock"
)

// CertificationDbService is an autogenerated mock type for the CertificationDbService type
type CertificationDbService struct {
	mock.Mock
}

// AddNewCertification provides a mock function with given fields: cert
func (_m *CertificationDbService) AddNewCertification(cert models.Certification) (*models.Certification, error) {
	ret := _m.Called(cert)

	if len(ret) == 0 {
		panic("no return value specified for AddNewCertification")
	}

	var r0 *models.Certification
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Certification) (*models.Certification, error)); ok {
		return rf(cert)
	}
	if rf, ok := ret.Get(0).(func(models.Certification) *models.Certification); ok {
		r0 = rf(cert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Certification)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Certification) error); ok {
		r1 = rf(cert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCertifications provides a mock function with given fields:
func (_m *CertificationDbService) GetAllCertifications() ([]models.Certification, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCertifications")
	}

	var r0 []models.Certification
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Certification, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Certification); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Certification)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCertificationById provides a mock function with given fields: id
func (_m *CertificationDbService) GetCertificationById(id string) (*models.Certification, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificationById")
	}

	var r0 *models.Certification
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Certification, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Certification); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Certification)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCertificationsByFilter provides a mock function with given fields: filters, input
func (_m *CertificationDbService) GetCertificationsByFilter(filters map[string]interface{}, input model.FilterCertificationsInput) ([]models.Certification, int64, error) {
	ret := _m.Called(filters, input)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificationsByFilter")
	}

	var r0 []models.Certification
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}, model.FilterCertificationsInput) ([]models.Certification, int64, error)); ok {
		return rf(filters, input)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}, model.FilterCertificationsInput) []models.Certification); ok {
		r0 = rf(filters, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Certification)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}, model.FilterCertificationsInput) int64); ok {
		r1 = rf(filters, input)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(map[string]interface{}, model.FilterCertificationsInput) error); ok {
		r2 = rf(filters, input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateCertification provides a mock function with given fields: cert
func (_m *CertificationDbService) UpdateCertification(cert models.Certification) (*models.Certification, error) {
	ret := _m.Called(cert)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCertification")
	}

	var r0 *models.Certification
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Certification) (*models.Certification, error)); ok {
		return rf(cert)
	}
	if rf, ok := ret.Get(0).(func(models.Certification) *models.Certification); ok {
		r0 = rf(cert)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Certification)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Certification) error); ok {
		r1 = rf(cert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCertificationDbService creates a new instance of CertificationDbService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCertificationDbService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CertificationDbService {
	mock := &CertificationDbService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
